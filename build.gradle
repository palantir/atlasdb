import org.gradle.plugins.ide.idea.model.IdeaModel

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.netflix.nebula:gradle-info-plugin:7.1.4'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:17.2.1'
        classpath 'com.palantir.baseline:gradle-baseline-java:3.43.0'
        classpath 'com.palantir.gradle.conjure:gradle-conjure:4.22.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:1.0.1'
        classpath 'com.palantir.metricschema:gradle-metric-schema:0.5.5'
        classpath 'com.palantir.sls-packaging:gradle-sls-packaging:4.10.1'
        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1'
        classpath 'gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.11.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.9.8'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'com.palantir.configuration-resolver' version '0.4.0'
    id 'com.palantir.consistent-versions' version '1.17.3'
    id 'org.unbroken-dome.test-sets' version '2.1.1'
    id 'com.google.protobuf' version '0.8.10'
}

apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.git-version'

apply from: 'gradle/versions.gradle'

group = 'com.palantir.atlasdb'
version = gitVersion()
description = 'Transactional distributed database layer'

task printLastVersion {
    doLast {
        def details = versionDetails()
        println details.lastTag
    }
}

allprojects {
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://dl.bintray.com/marshallpierce/maven/'
        }
    }

    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.java-format'

    // temporary until this is merged/fixed inside gradle-processors
    configurations.allProcessors {
        canBeConsumed = false
        attributes {
            attribute Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API)
        }
    }

    configurations.all {

        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.palantir.docker.compose' && details.requested.name == 'docker-compose-rule') {
                details.useTarget group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4', version: dependencyRecommendations.getRecommendedVersion('com.palantir.docker.compose', 'docker-compose-rule-junit4')
            }
        }

        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'io.dropwizard.metrics' && details.requested.name != 'metrics-jmx') {
                details.useVersion '3.2.6'
            }
        }

        resolutionStrategy.dependencySubstitution {
            it.substitute it.module('javax.annotation:javax.annotation-api') with it.module('jakarta.annotation:jakarta.annotation-api:1.3.5')
            it.substitute it.module('javax.validation:validation-api') with it.module('jakarta.validation:jakarta.validation-api:2.0.2')
            it.substitute it.module('javax.ws.rs:javax.ws.rs-api') with it.module('jakarta.ws.rs:jakarta.ws.rs-api:2.1.6')

            it.substitute it.module('javax.inject:javax.inject') with it.module('jakarta.inject:jakarta.inject-api:1.0')
            it.substitute it.module('org.glassfish.hk2.external:javax.inject') with it.module('jakarta.inject:jakarta.inject-api:1.0')
            it.substitute it.module('org.glassfish.hk2.external:jakarta.inject') with it.module('jakarta.inject:jakarta.inject-api:1.0')

            // See internal migration plugin PR 26: this direction is intentional.
            it.substitute it.module('javax.el:javax.el-api') with it.module('org.glassfish:jakarta.el:3.0.3')
            it.substitute it.module('jakarta.el:jakarta.el-api') with it.module('org.glassfish:jakarta.el:3.0.3')
            it.substitute it.module('org.glassfish:javax.el') with it.module('org.glassfish:jakarta.el:3.0.3')
            it.substitute it.module('org.glassfish.web:javax.el') with it.module('org.glassfish:jakarta.el:3.0.3')
        }
    }

    tasks.withType(JavaCompile) {
        // temporarily relax constraints until we can fix all violations
        options.errorprone.warn 'CatchBlockLogException',
                'CheckReturnValue',
                'DangerousCompletableFutureUsage',
                'DoNotMock',
                'ExtendsErrorOrThrowable',
                'ImmutablesBuilderMissingInitialization',
                'LogSafePreconditionsMessageFormat',
                'PreconditionsConstantMessage',
                'PreconditionsInvalidPlaceholder',
                'PreferSafeLoggingPreconditions',
                'ReadReturnValueIgnored',
                'ReferenceEquality',
                'ReturnValueIgnored',
                'SafeLoggingExceptionMessageFormat',
                'ValidateConstantMessage'
        options.errorprone.disable 'StrictUnusedVariable', 'JdkObsolete'
    }
}

subprojects {
    apply plugin: 'com.palantir.configuration-resolver'
    task allDeps(type: DependencyReportTask) {}
}

configure(subprojects.findAll {!it.getPath().startsWith(":examples")}) {
    apply from: "$rootDir/gradle/publish-jars.gradle"
}

// Setup copyright notice as a block comment, and no newline after it
project.afterEvaluate {
    def ideaRootModel = project.rootProject.extensions.findByType(IdeaModel)
    if (ideaRootModel) {
        ideaRootModel.project.ipr.withXml { provider ->
            def node = provider.asNode()
            def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="__TEMPLATE__">
                    <option name="addBlankAfter" value="false" />
                    <option name="separateBefore" value="true" />
                    <option name="lenBefore" value="2" />
                </LanguageOptions>
                """.stripIndent()))
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="JAVA">
                    <option name="fileTypeOverride" value="3" />
                </LanguageOptions>
                """.stripIndent()))
        }
    }
}

allprojects {
    // This allows tests that require an artefact to exist to
    // decide whether to call gradle themselves or not
    tasks.withType(Test) {
        systemProperty 'RUNNING_IN_GRADLE', 'true'
    }
}
