import org.gradle.plugins.ide.idea.model.IdeaModel

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
        classpath 'com.palantir:gradle-baseline-java:0.7.1'
        classpath 'com.palantir:jacoco-coverage:0.4.0'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.1.3'
    id 'org.inferred.processors' version '1.1'
}

repositories {
<<<<<<< 7033b8fc57203bf309772ac48101c6126fb91d56
    mavenCentral()
=======
>>>>>>> merge develop into perf cli branch (#820)
    maven {
        url 'https://dl.bintray.com/palantir/releases/'
    }
}

apply from: 'gradle/versions.gradle'

group = 'com.palantir.atlasdb'
version = gitVersion()
description = 'Transactional distributed database layer'

task clean(type: Delete) {
    delete buildDir
}

<<<<<<< 7033b8fc57203bf309772ac48101c6126fb91d56
apply plugin: 'com.palantir.jacoco-full-report'

jacoco {
    toolVersion = libVersions.jacoco
}

=======
>>>>>>> merge develop into perf cli branch (#820)
subprojects {
  task allDeps(type: DependencyReportTask) {}
}

apply from: 'idea.gradle'

// Setup copyright notice as JavaDoc and no newline after it
project.afterEvaluate {
    def ideaRootModel = project.rootProject.extensions.findByType(IdeaModel)
    if (ideaRootModel) {
        ideaRootModel.project.ipr.withXml { provider ->
            def node = provider.asNode()
            def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="__TEMPLATE__">
                    <option name="addBlankAfter" value="false" />
                    <option name="separateBefore" value="true" />
                    <option name="lenBefore" value="2" />
                </LanguageOptions>
                """.stripIndent()))
        }
    }
}

def ideaSetModuleLevel(idea, targetCompatibility) {
    if (idea == null) return
    idea.module.jdkName = targetCompatibility
    idea.module.iml.withXml {
        it.asNode().component.find { it.@name == 'NewModuleRootManager' }.@LANGUAGE_LEVEL = ("JDK_" + targetCompatibility).replaceAll('\\.', '_')
    }
}

allprojects {
    // This allows tests that require an artefact to exist to
    // decide whether to call gradle themselves or not
    tasks.withType(Test) {
        systemProperty 'RUNNING_IN_GRADLE', 'true'
    }
}
