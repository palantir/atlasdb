import org.gradle.plugins.ide.idea.model.IdeaModel

buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.netflix.nebula:gradle-info-plugin:10.0.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:17.3.2'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.2.1'
        classpath 'com.palantir.baseline:gradle-baseline-java:4.9.0'
        classpath 'com.palantir.gradle.conjure:gradle-conjure:5.10.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.2.0'
        classpath 'com.palantir.metricschema:gradle-metric-schema:0.8.0'
        classpath 'com.palantir.sls-packaging:gradle-sls-packaging:4.24.0'
        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1'
        classpath 'com.palantir.gradle.gitversion:gradle-git-version:0.12.3'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.3.0'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    id 'com.palantir.consistent-versions' version '2.0.0'
    id 'org.unbroken-dome.test-sets' version '4.0.0'
    id 'com.google.protobuf' version '0.8.17'
}

apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.git-version'
apply plugin: 'com.palantir.external-publish'

apply from: 'gradle/versions.gradle'

group = 'com.palantir.atlasdb'
version = sanitizeVersion()
description = 'Transactional distributed database layer'

def sanitizeVersion() {
    def isClean = "git status --porcelain".execute().text.isEmpty()
    def pluginReportedVersion = gitVersion()
    def dirtySuffix = ".dirty"

    if (isClean && pluginReportedVersion.endsWith(dirtySuffix)) {
        return pluginReportedVersion.substring(0, pluginReportedVersion.length() - dirtySuffix.length())
    }
    return pluginReportedVersion
}

task printLastVersion {
    doLast {
        def details = versionDetails()
        println details.lastTag
    }
}

allprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone
    apply plugin: 'com.palantir.java-format'

    // temporary until this is merged/fixed inside gradle-processors
    configurations.allProcessors {
        canBeConsumed = false
        attributes {
            attribute Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API)
        }
    }

    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'io.dropwizard.metrics' && details.requested.name != 'metrics-jmx') {
                details.useVersion '3.2.6'
            }
        }

        resolutionStrategy.dependencySubstitution {
            it.substitute it.module('javax.annotation:javax.annotation-api') with it.module('jakarta.annotation:jakarta.annotation-api:1.3.5')
            it.substitute it.module('javax.validation:validation-api') with it.module('jakarta.validation:jakarta.validation-api:2.0.2')
            it.substitute it.module('javax.ws.rs:javax.ws.rs-api') with it.module('jakarta.ws.rs:jakarta.ws.rs-api:2.1.6')
            it.substitute it.module('javax.servlet:javax.servlet-api') with it.module('jakarta.servlet:jakarta.servlet-api:4.0.3')

            it.substitute it.module('javax.inject:javax.inject') with it.module('jakarta.inject:jakarta.inject-api:1.0')
            it.substitute it.module('org.glassfish.hk2.external:javax.inject') with it.module('jakarta.inject:jakarta.inject-api:1.0')
            it.substitute it.module('org.glassfish.hk2.external:jakarta.inject') with it.module('jakarta.inject:jakarta.inject-api:1.0')

            // See internal migration plugin PR 26: this direction is intentional.
            it.substitute it.module('javax.el:javax.el-api') with it.module('org.glassfish:jakarta.el:3.0.3')
            it.substitute it.module('jakarta.el:jakarta.el-api') with it.module('org.glassfish:jakarta.el:3.0.3')
            it.substitute it.module('org.glassfish:javax.el') with it.module('org.glassfish:jakarta.el:3.0.3')
            it.substitute it.module('org.glassfish.web:javax.el') with it.module('org.glassfish:jakarta.el:3.0.3')
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += ['-Werror']
        // temporarily relax constraints until we can fix all violations
        options.errorprone.disable 'ArrayAsKeyOfSetOrMap',
                'CacheLoaderNull',
                'ClassNewInstance',
                'CloseableProvides',
                'DangerousCompletableFutureUsage',
                'DnsLookup',
                'DoNotMock',
                'EmptyBlockTag',
                'EqualsGetClass',
                'ExtendsErrorOrThrowable',
                'Finally',
                'FutureReturnValueIgnored',
                'GetClassOnEnum',
                'HidingField',
                'ImmutableEnumChecker',
                'ImmutablesBuilderMissingInitialization',
                'InconsistentCapitalization',
                'InlineFormatString',
                'IntLongMath',
                'InvalidBlockTag',
                'InvalidInlineTag',
                'InvalidLink',
                'InvalidParam',
                'InvalidThrows',
                'JavaTimeDefaultTimeZone',
                'JdkObsolete',
                'LogSafePreconditionsMessageFormat',
                'MathAbsoluteRandom',
                'MissingSummary',
                'MixedMutabilityReturnType',
                'MockitoInternalUsage',
                'ModifyCollectionInEnhancedForLoop',
                'NarrowingCompoundAssignment',
                'NullOptional',
                'OperatorPrecedence',
                'OverrideThrowableToString',
                'PreconditionsConstantMessage',
                'PreconditionsInvalidPlaceholder',
                'PreferSafeLoggableExceptions',
                'PreferSafeLoggingPreconditions',
                'ProtectedMembersInFinalClass',
                'PublicConstructorForAbstractClass',
                'RawTypes',
                'ReadReturnValueIgnored',
                'ReturnValueIgnored',
                'ReverseDnsLookup',
                'SafeLoggingExceptionMessageFormat',
                'Slf4jLogsafeArgs',
                'Slf4jThrowable',
                'StaticAssignmentInConstructor',
                'StrictUnusedVariable',
                'StringSplitter',
                'ThreadPriorityCheck',
                'ThrowError',
                'ThrowSpecificity',
                'TooManyArguments',
                'TypeParameterUnusedInFormals',
                'UndefinedEquals',
                'UnnecessaryLambda',
                'UnrecognisedJavadocTag',
                'UseCorrectAssertInTests',
                'ValidateConstantMessage',
                'VisibleForTestingPackagePrivate'
    }
}

subprojects {
    task allDeps(type: DependencyReportTask) {}
}

afterEvaluate {
    configure(subprojects.findAll {!it.getPath().startsWith(":examples")}) {
        if (!project.plugins.hasPlugin('com.palantir.external-publish-dist')) {
            apply from: "$rootDir/gradle/publish-jars.gradle"
        }
    }
}


// Setup copyright notice as a block comment, and no newline after it
project.afterEvaluate {
    def ideaRootModel = project.rootProject.extensions.findByType(IdeaModel)
    if (ideaRootModel) {
        ideaRootModel.project.ipr.withXml { provider ->
            def node = provider.asNode()
            def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="__TEMPLATE__">
                    <option name="addBlankAfter" value="false" />
                    <option name="separateBefore" value="true" />
                    <option name="lenBefore" value="2" />
                </LanguageOptions>
                """.stripIndent()))
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="JAVA">
                    <option name="fileTypeOverride" value="3" />
                </LanguageOptions>
                """.stripIndent()))
        }
    }
}

allprojects {
    // This allows tests that require an artefact to exist to
    // decide whether to call gradle themselves or not
    tasks.withType(Test) {
        systemProperty 'RUNNING_IN_GRADLE', 'true'
    }
}
