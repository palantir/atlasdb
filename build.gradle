import org.gradle.plugins.ide.idea.model.IdeaModel

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.3.1'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.12'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:0.13.0'
        classpath 'com.palantir:jacoco-coverage:0.4.0'
        classpath 'com.palantir.sls-packaging:gradle-sls-packaging:2.3.1'
        classpath "com.netflix.nebula:gradle-dependency-lock-plugin:4.3.2"
        classpath 'com.netflix.nebula:nebula-dependency-recommender:3.6.3'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:4.9.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.0'
    id 'com.palantir.configuration-resolver' version '0.2.0'
    id 'com.palantir.git-version' version '0.5.2'
    id 'org.inferred.processors' version '1.2.12'
    id 'org.unbroken-dome.test-sets' version '1.2.0'
}

repositories {
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/palantir/releases/'
    }
}
apply plugin: 'com.palantir.baseline-config'

dependencies {
    // Adds a dependency on the Baseline configuration files. Typically use
    // the same version as the plugin itself.
    baseline "com.palantir.baseline:gradle-baseline-java-config:0.13.0@zip"
}

apply from: 'gradle/versions.gradle'

group = 'com.palantir.atlasdb'
version = gitVersion()
description = 'Transactional distributed database layer'

task printLastVersion {
    doLast {
        def details = versionDetails()
        println details.lastTag
    }
}

apply plugin: 'com.palantir.jacoco-full-report'

jacoco {
    toolVersion = libVersions.jacoco
}

allprojects {
    apply plugin: 'nebula.dependency-recommender'

    dependencyRecommendations {
        strategy OverrideTransitives
        propertiesFile file: project.rootProject.file('versions.props')
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }

        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.palantir.docker.compose' && details.requested.name == 'docker-compose-rule') {
                details.useTarget group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4', version: dependencyRecommendations.getRecommendedVersion('com.palantir.docker.compose', 'docker-compose-rule-junit4')
            }
        }
    }
}

subprojects {
    apply plugin: 'com.palantir.configuration-resolver'
    task allDeps(type: DependencyReportTask) {}
}

apply from: 'gradle/idea.gradle'

// Setup copyright notice as a block comment, and no newline after it
project.afterEvaluate {
    def ideaRootModel = project.rootProject.extensions.findByType(IdeaModel)
    if (ideaRootModel) {
        ideaRootModel.project.ipr.withXml { provider ->
            def node = provider.asNode()
            def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="__TEMPLATE__">
                    <option name="addBlankAfter" value="false" />
                    <option name="separateBefore" value="true" />
                    <option name="lenBefore" value="2" />
                </LanguageOptions>
                """.stripIndent()))
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="JAVA">
                    <option name="fileTypeOverride" value="3" />
                </LanguageOptions>
                """.stripIndent()))
        }
    }
}

def ideaSetModuleLevel(idea, targetCompatibility) {
    if (idea == null) return
    idea.module.jdkName = targetCompatibility
    idea.module.iml.withXml {
        it.asNode().component.find { it.@name == 'NewModuleRootManager' }.@LANGUAGE_LEVEL = ("JDK_" + targetCompatibility).replaceAll('\\.', '_')
    }
}

allprojects {
    // This allows tests that require an artefact to exist to
    // decide whether to call gradle themselves or not
    tasks.withType(Test) {
        systemProperty 'RUNNING_IN_GRADLE', 'true'
    }
}
