import org.gradle.plugins.ide.idea.model.IdeaModel

buildscript {
    repositories {
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/palantir/releases/'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }

    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.9.8'
        classpath 'gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.22.1'
        classpath 'com.palantir.baseline:gradle-baseline-java:1.8.2'
        classpath 'gradle.plugin.com.palantir.gradle.gitversion:gradle-git-version:0.11.0'
        classpath 'com.palantir.sls-packaging:gradle-sls-packaging:3.8.1'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:8.0.0'
        classpath 'com.netflix.nebula:nebula-publishing-plugin:13.2.0'
        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0'
        classpath 'gradle.plugin.org.inferred:gradle-processors:3.1.0'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.1.0'
    id 'com.palantir.configuration-resolver' version '0.4.0'
    id 'org.unbroken-dome.test-sets' version '2.1.1'
    id 'com.google.protobuf' version '0.8.10'
}

repositories {
    mavenCentral()
    maven {
        url 'https://dl.bintray.com/palantir/releases/'
    }
}
apply plugin: 'com.palantir.baseline-config'
apply plugin: 'com.palantir.baseline-circleci'
apply plugin: 'com.palantir.git-version'

apply from: 'gradle/versions.gradle'

group = 'com.palantir.atlasdb'
version = gitVersion()
description = 'Transactional distributed database layer'

task printLastVersion {
    doLast {
        def details = versionDetails()
        println details.lastTag
    }
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'nebula.dependency-recommender'
    apply plugin: 'org.inferred.processors'  // installs the "processor" configuration needed for baseline-error-prone

    // temporary until this is merged/fixed inside gradle-processors
    configurations.allProcessors {
        canBeConsumed = false
        attributes {
            attribute Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API)
        }
    }

    dependencyRecommendations {
        strategy OverrideTransitives
        propertiesFile file: project.rootProject.file('versions.props')
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }

        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'com.palantir.docker.compose' && details.requested.name == 'docker-compose-rule') {
                details.useTarget group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4', version: dependencyRecommendations.getRecommendedVersion('com.palantir.docker.compose', 'docker-compose-rule-junit4')
            }
        }
    }
}

subprojects {
    apply plugin: 'com.palantir.configuration-resolver'
    task allDeps(type: DependencyReportTask) {}
}

configure(subprojects.findAll {!it.getPath().startsWith(":examples")}) {
    apply from: "$rootDir/gradle/publish-jars.gradle"
}

apply from: 'gradle/idea.gradle'

// Setup copyright notice as a block comment, and no newline after it
project.afterEvaluate {
    def ideaRootModel = project.rootProject.extensions.findByType(IdeaModel)
    if (ideaRootModel) {
        ideaRootModel.project.ipr.withXml { provider ->
            def node = provider.asNode()
            def copyrightManager = node.component.find { it.'@name' == 'CopyrightManager' }
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="__TEMPLATE__">
                    <option name="addBlankAfter" value="false" />
                    <option name="separateBefore" value="true" />
                    <option name="lenBefore" value="2" />
                </LanguageOptions>
                """.stripIndent()))
            copyrightManager.append(new XmlParser().parseText("""
                <LanguageOptions name="JAVA">
                    <option name="fileTypeOverride" value="3" />
                </LanguageOptions>
                """.stripIndent()))
        }
    }
}

allprojects {
    // This allows tests that require an artefact to exist to
    // decide whether to call gradle themselves or not
    tasks.withType(Test) {
        systemProperty 'RUNNING_IN_GRADLE', 'true'
    }
}
