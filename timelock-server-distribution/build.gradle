apply plugin: 'com.palantir.java-distribution'

apply from: "../gradle/docker.gradle"
apply from: "../gradle/publish-dists.gradle"
apply from: "../gradle/shared.gradle"

dependencies {
    runtime project(':timelock-server')
    runtime group: 'org.mortbay.jetty.alpn', name: 'jetty-alpn-agent', version: libVersions.jetty_alpn_agent
}

distribution {
    serviceName "timelock-server"
    mainClass 'com.palantir.atlasdb.timelock.TimeLockServerLauncher'
    args 'server', 'var/conf/timelock.yml'
    defaultJvmOpts "-Xms512m", "-Xmx512m", "-javaagent:service/lib/jetty-alpn-agent-${libVersions.jetty_alpn_agent}.jar"
}

configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            switch (details.requested.group) {
                case 'io.dropwizard':
                    details.useVersion libVersions.timelock_dropwizard
                    break
                case 'com.fasterxml.jackson.core':
                case 'com.fasterxml.jackson.datatype':
                    details.useVersion libVersions.timelock_jackson
                    break
                case 'org.eclipse.jetty':
                    details.useVersion libVersions.timelock_jetty
                    break
                case 'org.glassfish.jersey.core':
                    details.useVersion libVersions.timelock_jersey
                    break
                case 'com.google.guava':
                    details.useVersion libVersions.timelock_guava
                    break
                case 'org.glassfish.hk2':
                case 'org.glassfish.hk2.external':
                    details.useVersion libVersions.glassfish_hk2
                    break
            }
        }
        forcedModules = [
                'ch.qos.logback:logback-classic:1.1.7',
                'com.fasterxml.jackson.module:jackson-module-afterburner:2.6.7',
                'com.netflix.feign:feign-core:8.10.1',
                'io.atomix.catalyst:catalyst-transport:1.1.2',
                'org.objenesis:objenesis:2.3',
        ]
    }
}

dependencyRecommendations {
    strategy ConflictResolved
}
