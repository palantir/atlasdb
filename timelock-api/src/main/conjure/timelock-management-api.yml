types:
  imports:
    Long:
      base-type: string
      external:
        java: java.lang.Long
services:
  TimeLockManagementService:
    name: TimeLock Management Service
    default-auth: header
    package: com.palantir.atlasdb.timelock.api.management
    base-path: /tl/management
    endpoints:
      getNamespaces:
        http: POST /getNamespaces
        returns: set<string>
        docs: |
          The endpoint loads all persisted namespaces. ``leaderPaxos`` is filtered out from the set
          as it is not a namespace. No transactionality guarantees are given: namespace additions and
          deletions while the request is running may or may not be reflected in the output.

      getActiveNamespaces:
        http: POST /getActiveNamespaces
        returns: set<string>
        docs: |
          The endpoint loads all namespaces with new timestamps since the last restart. 
          ``leaderPaxos`` is filtered out from the set as it is not a namespace.

      achieveConsensus:
        http: POST /achieveConsensus
        args:
          namespaces:
            type: set<string>
            safety: safe
        docs: |
          The operation of achieving consensus on all namespaces is NOT atomic. In the case of failures, it can
          be assumed that consensus was achieved on some namespaces.

      invalidateResources:
        http: POST /invalidateResources
        args:
          namespaces:
            type: set<string>
            safety: safe
        docs: |
          Invalidates existing resources for a given TimeLock namespace in a persistant way, until re-enabled. Does not
          actually cause a leader election, and should not interrupt service for other naemspaces. Note that this
          operation is atomic for each namespace (e.g. users will not see two different lock services servicing the
          same startTransactions request), but not atomic as a whole. Additionally, if this method throws, it is
          nondeterministic which, if any, namespaces have been invalidated; some may even be invalidated only on a
          subset of nodes. This state can be cleared by re-enabling all namespaces.

      getServerLifecycleId:
        http: POST /getServerLifecycleId
        returns: uuid
        docs: |
          Gets the randomly generated server id associated with the server's current lifecycle upon start up.

      forceKillTimeLockServer:
        http: POST /forceKillTimeLockServer
        returns: uuid
        docs: |
          Kills TimeLock server asynchronously i.e. current server will not be able to talk to
          peer nodes or serve requests once the task is executed. After hitting this endpoint, the server will require
          external intervention to start up the service again. The endpoint returns the (randomly generated) server id
          associated with server upon start up. A client can then make `getServerId` requests wherein change in
          server id would imply that the server was bounced.

      fastForwardTimestamp:
        http: POST /fastForward
        args:
          namespace:
            type: string
            safety: safe
            param-type: query
          currentTimestamp:
            type: Long
            param-type: query
            docs: the largest timestamp issued until the fast-forward call
        tags:
          - server-request-context
        docs: |
          Updates the timestamp service to the currentTimestamp to ensure that all fresh timestamps issued after
          this request are greater than the current timestamp.
          The caller of this is responsible for not using any of the fresh timestamps previously served to it,
          and must call getFreshTimestamps() to ensure it is using timestamps after the fastforward point.
