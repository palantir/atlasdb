types:
  imports:
    LeaderTime:
      base-type: any
      external:
        java: com.palantir.lock.v2.LeaderTime
    Namespace:
      base-type: string
      external:
        java: com.palantir.atlasdb.timelock.api.Namespace
    NanoTime:
      base-type: safelong
      external:
        java: com.palantir.common.time.NanoTime
    PartitionedTimestamps:
      base-type: any
      external:
        java: com.palantir.lock.v2.PartitionedTimestamps
    LockImmutableTimestampResponse:
      base-type: any
      external:
        java: com.palantir.lock.v2.LockImmutableTimestampResponse
    Lease:
      base-type: any
      external:
        java: com.palantir.lock.v2.Lease
    LockToken:
      base-type: any
      external:
        java: com.palantir.lock.v2.LockToken
    LockWatchStateUpdate:
      base-type: any
      external:
        java: com.palantir.lock.watch.LockWatchStateUpdate
    Long:
      base-type: any
      external:
        java: java.lang.Long
    LockWatchReference:
      base-type: any
      external:
        java: com.palantir.lock.watch.LockWatchReferences.LockWatchReference

  definitions:
    default-package: com.palantir.atlasdb.timelock.api
    objects:
      ConjureIdentifiedVersion:
        fields:
          id: uuid
          version: Long
        docs: |
          ``version`` is always an inclusive number. If the event log is empty, ``-1`` is returned.
      ConjureStartTransactionsRequest:
        fields:
          requestId: uuid
          requestorId: uuid
          numTransactions: integer
          lastKnownVersion: optional<ConjureIdentifiedVersion>
      ConjureStartTransactionsResponse:
        fields:
          immutableTimestamp: LockImmutableTimestampResponse
          timestamps: PartitionedTimestamps
          lease: Lease
          lockWatchUpdate: LockWatchStateUpdate
      ConjureGetFreshTimestampsRequest:
        fields:
          numTimestamps: integer
      ConjureGetFreshTimestampsResponse:
        fields:
          inclusiveLower: Long
          inclusiveUpper: Long
      ConjureLockDescriptor:
        alias: binary
      ConjureLockRequest:
        fields:
          requestId: uuid
          lockDescriptors: set<ConjureLockDescriptor>
          acquireTimeoutMs: integer
          clientDescription: optional<string>
      ConjureLockToken:
        fields:
          requestId: uuid
      SuccessfulLockResponse:
        fields:
          lockToken: ConjureLockToken
          lease: Lease
      UnsuccessfulLockResponse:
        fields: {}
      ConjureLockResponse:
        union:
          successful: SuccessfulLockResponse
          unsuccessful: UnsuccessfulLockResponse
      ConjureWaitForLocksResponse:
        fields:
          wasSuccessful: boolean
      ConjureRefreshLocksRequest:
        fields:
          tokens: set<ConjureLockToken>
      ConjureRefreshLocksResponse:
        fields:
          refreshedTokens: set<ConjureLockToken>
          lease: Lease
      ConjureUnlockRequest:
        fields:
          tokens: set<ConjureLockToken>
      ConjureUnlockResponse:
        fields:
          tokens: set<ConjureLockToken>
      GetCommitTimestampsRequest:
        fields:
          numTimestamps: integer
          lastKnownVersion: optional<ConjureIdentifiedVersion>
      GetCommitTimestampsResponse:
        fields:
          inclusiveLower: Long
          inclusiveUpper: Long
          lockWatchUpdate: LockWatchStateUpdate
      LockWatchRequest:
        fields:
          references: set<LockWatchReference>
      LeaderTimes:
        fields:
          leaderTimes: map<Namespace, LeaderTime>
      # backup and restore
      InProgressBackupToken:
        package: com.palantir.atlasdb.backup.api
        fields:
          namespace: Namespace
          lockToken: LockToken
          immutableTimestamp: Long
          backupStartTimestamp: Long
      CompletedBackup:
        package: com.palantir.atlasdb.backup.api
        fields:
          namespace: Namespace
          immutableTimestamp: Long
          backupStartTimestamp: Long
          backupEndTimestamp: Long
      PrepareBackupRequest:
        package: com.palantir.atlasdb.backup.api
        fields:
          namespaces: set<Namespace>
      PrepareBackupResponse:
        package: com.palantir.atlasdb.backup.api
        fields:
          successful: set<InProgressBackupToken>
      CompleteBackupRequest:
        package: com.palantir.atlasdb.backup.api
        fields:
          backupTokens: set<InProgressBackupToken>
      CompleteBackupResponse:
        package: com.palantir.atlasdb.backup.api
        fields:
          successfulBackups: set<CompletedBackup>
      CompleteRestoreRequest:
        package: com.palantir.atlasdb.backup.api
        fields:
          completedBackups: map<Namespace, CompletedBackup>
      CompleteRestoreResponse:
        package: com.palantir.atlasdb.backup.api
        fields:
          successfulNamespaces: set<Namespace>

services:
  AtlasBackupClient:
    name: Internal backup service
    default-auth: header
    package: com.palantir.atlasdb.backup.api
    base-path: /backup
    endpoints:
      prepareBackup:
        http: POST /prepare
        args:
          request: PrepareBackupRequest
        returns: PrepareBackupResponse
      completeBackup:
        http: POST /complete
        args:
          request: CompleteBackupRequest
        returns: CompleteBackupResponse
  AtlasRestoreClient:
    name: Internal restore service
    default-auth: header
    package: com.palantir.atlasdb.backup.api
    base-path: /restore
    endpoints:
      completeRestore:
        http: POST /complete
        args:
          request: CompleteRestoreRequest
        returns: CompleteRestoreResponse
  ConjureTimelockService:
    name: Timelock service
    default-auth: header
    package: com.palantir.atlasdb.timelock.api
    base-path: /tl
    endpoints:
      startTransactions:
        http: POST /st/{namespace}
        args:
          namespace: string
          request: ConjureStartTransactionsRequest
        returns: ConjureStartTransactionsResponse
      getFreshTimestamps:
        http: POST /ts/{namespace}
        args:
          namespace: string
          request: ConjureGetFreshTimestampsRequest
        returns: ConjureGetFreshTimestampsResponse
      leaderTime:
        http: POST /lt/{namespace}
        args:
          namespace: string
        returns: LeaderTime
      lock:
        http: POST /l/{namespace}
        args:
          namespace: string
          request: ConjureLockRequest
        returns: ConjureLockResponse
      waitForLocks:
        http: POST /wl/{namespace}
        args:
          namespace: string
          request: ConjureLockRequest
        returns: ConjureWaitForLocksResponse
      refreshLocks:
        http: POST /rl/{namespace}
        args:
          namespace: string
          request: ConjureRefreshLocksRequest
        returns: ConjureRefreshLocksResponse
      unlock:
        http: POST /ul/{namespace}
        args:
          namespace: string
          request: ConjureUnlockRequest
        returns: ConjureUnlockResponse
      getCommitTimestamps:
        http: POST /gct/{namespace}
        args:
          namespace: string
          request: GetCommitTimestampsRequest
        returns: GetCommitTimestampsResponse
        docs: |
          Batched endpoint for acquiring commit timestamps (a list of fresh timestamps) and the list of all lock watch
          events since the last known version up to after the commit timestamps have been issued.
  ConjureLockWatchingService:
    name: Lock Watching service
    default-auth: header
    package: com.palantir.atlasdb.timelock.lock.watch
    base-path: /lw
    endpoints:
      startWatching:
        http: POST /sw/{namespace}
        args:
          namespace: string
          request: LockWatchRequest
  MultiClientConjureTimelockService:
    name: Multi Client Timelock Service
    default-auth: header
    package: com.palantir.atlasdb.timelock.api
    base-path: /tl/multi
    endpoints:
      leaderTimes:
        http: POST /lts
        args:
          namespaces: set<Namespace>
        returns: LeaderTimes
        docs: |
          Version of ConjureTimelockService#leaderTime endpoint for acquiring leaderTimes for a set of namespaces.
      startTransactions:
        http: POST /sts
        deprecated: |
          This endpoint is deprecated. Please use {@link #startTransactionsForClients} to start transactions for multiple clients.
        args:
          requests: map<Namespace, ConjureStartTransactionsRequest>
        returns: map<Namespace, ConjureStartTransactionsResponse>
        docs: |
          Version of ConjureTimelockService#startTransactions that starts transactions for multiple namespaces.
      getCommitTimestamps:
        http: POST /gcts
        deprecated: |
          This endpoint is deprecated. Please use {@link #getCommitTimestampsForClients} to get commit timestamps for multiple clients.
        args:
          requests: map<Namespace, GetCommitTimestampsRequest>
        returns: map<Namespace, GetCommitTimestampsResponse>
        docs: |
          Version of ConjureTimelockService#getCommitTimestamps for acquiring commit timestamps for multiple namespaces.
      startTransactionsForClients:
        http: POST /stsfc
        args:
          requests: map<Namespace, ConjureStartTransactionsRequest>
        returns: map<Namespace, ConjureStartTransactionsResponse>
        docs: |
          Version of ConjureTimelockService#startTransactions that starts transactions for multiple namespaces.
      getCommitTimestampsForClients:
        http: POST /gctsfc
        args:
          requests: map<Namespace, GetCommitTimestampsRequest>
        returns: map<Namespace, GetCommitTimestampsResponse>
        docs: |
          Version of ConjureTimelockService#getCommitTimestamps for acquiring commit timestamps for multiple namespaces.
