types:
  imports:
    LeaderTime:
      base-type: any
      external:
        java: com.palantir.lock.v2.LeaderTime
    Namespace:
      base-type: string
      external:
        java: com.palantir.atlasdb.timelock.api.Namespace
    NanoTime:
      base-type: safelong
      external:
        java: com.palantir.common.time.NanoTime
    PartitionedTimestamps:
      base-type: any
      external:
        java: com.palantir.lock.v2.PartitionedTimestamps
    LockImmutableTimestampResponse:
      base-type: any
      external:
        java: com.palantir.lock.v2.LockImmutableTimestampResponse
    Lease:
      base-type: any
      external:
        java: com.palantir.lock.v2.Lease
    LockToken:
      base-type: any
      external:
        java: com.palantir.lock.v2.LockToken
    LockWatchStateUpdate:
      base-type: any
      external:
        java: com.palantir.lock.watch.LockWatchStateUpdate
    Long:
      base-type: any
      external:
        java: java.lang.Long
    LockWatchReference:
      base-type: any
      external:
        java: com.palantir.lock.watch.LockWatchReferences.LockWatchReference

  definitions:
    default-package: com.palantir.atlasdb.timelock.api
    objects:
      ConjureIdentifiedVersion:
        fields:
          id:
            type: uuid
            safety: safe
          version: Long
        docs: |
          ``version`` is always an inclusive number. If the event log is empty, ``-1`` is returned.
      ConjureStartTransactionsRequest:
        fields:
          requestId:
            type: uuid
            safety: safe
          requestorId:
            type: uuid
            safety: safe
          numTransactions:
            type: integer
            safety: safe
          lastKnownVersion: optional<ConjureIdentifiedVersion>
      ConjureStartTransactionsResponse:
        fields:
          immutableTimestamp: LockImmutableTimestampResponse
          timestamps: PartitionedTimestamps
          lease: Lease
          lockWatchUpdate: LockWatchStateUpdate
      ConjureSingleTimestamp:
        alias: Long
      ConjureTimestampRange:
        fields:
          start: Long
          count: Long
        docs: |
          A contiguous range of timestamps, covering the range [start, start + count). This format is chosen to balance
          efficiency and readability.
      ConjureGetFreshTimestampsRequest:
        fields:
          numTimestamps:
            type: integer
            safety: safe
      ConjureGetFreshTimestampsRequestV2:
        alias: integer
        safety: safe
      ConjureGetFreshTimestampsResponse:
        fields:
          inclusiveLower: Long
          inclusiveUpper: Long
      ConjureGetFreshTimestampsResponseV2:
        alias: ConjureTimestampRange
      ConjureUnchangedChangeMetadata:
        fields: {}
      ConjureUpdatedChangeMetadata:
        fields:
          oldValue:
            type: binary
            safety: unsafe
          newValue:
            type: binary
            safety: unsafe
      ConjureDeletedChangeMetadata:
        fields:
          oldValue:
            type: binary
            safety: unsafe
      ConjureCreatedChangeMetadata:
        fields:
          newValue:
            type: binary
            safety: unsafe
      ConjureChangeMetadata:
          union:
            unchanged: ConjureUnchangedChangeMetadata
            updated: ConjureUpdatedChangeMetadata
            deleted: ConjureDeletedChangeMetadata
            created: ConjureCreatedChangeMetadata
      ConjureLockDescriptorListChecksum:
        fields:
          typeId:
            type: integer
            safety: safe
          value:
            type: binary
            safety: unsafe
      ConjureLockRequestMetadata:
        fields:
          indexToChangeMetadata: map<integer, ConjureChangeMetadata>
          lockListChecksum: ConjureLockDescriptorListChecksum
      ConjureLockDescriptor:
        alias: binary
        safety: unsafe
      ConjureLockRequest:
        fields:
          requestId:
            type: uuid
            safety: safe
          lockDescriptors: list<ConjureLockDescriptor>
          acquireTimeoutMs:
            type: integer
            safety: safe
          clientDescription:
            type: optional<string>
            safety: unsafe
          metadata: optional<ConjureLockRequestMetadata>
      ConjureLockToken:
        fields:
          requestId:
            type: uuid
            safety: safe
      ConjureLockTokenV2:
        alias: uuid
        safety: safe
      SuccessfulLockResponse:
        fields:
          lockToken: ConjureLockToken
          lease: Lease
      UnsuccessfulLockResponse:
        fields: {}
      ConjureLockResponse:
        union:
          successful: SuccessfulLockResponse
          unsuccessful: UnsuccessfulLockResponse
      ConjureWaitForLocksResponse:
        fields:
          wasSuccessful:
            type: boolean
            safety: safe
      ConjureRefreshLocksRequest:
        fields:
          tokens: set<ConjureLockToken>
      ConjureRefreshLocksResponse:
        fields:
          refreshedTokens: set<ConjureLockToken>
          lease: Lease
      ConjureUnlockRequest:
        fields:
          tokens: set<ConjureLockToken>
      ConjureUnlockResponse:
        fields:
          tokens: set<ConjureLockToken>
      ConjureRefreshLocksRequestV2:
        alias: set<ConjureLockTokenV2>
      ConjureRefreshLocksResponseV2:
        fields:
          refreshedTokens: set<ConjureLockTokenV2>
          lease: Lease
      ConjureUnlockRequestV2:
        alias: set<ConjureLockTokenV2>
      ConjureUnlockResponseV2:
        alias: set<ConjureLockTokenV2>
      GetCommitTimestampsRequest:
        fields:
          numTimestamps:
            type: integer
            safety: safe
          lastKnownVersion: optional<ConjureIdentifiedVersion>
      GetCommitTimestampsResponse:
        fields:
          inclusiveLower: Long
          inclusiveUpper: Long
          lockWatchUpdate: LockWatchStateUpdate
      GetCommitTimestampRequest:
        fields:
          lastKnownVersion: optional<ConjureIdentifiedVersion>
      GetCommitTimestampResponse:
        fields:
          timestamp: Long
          lockWatchUpdate: LockWatchStateUpdate
      LockWatchRequest:
        fields:
          references: set<LockWatchReference>
      LeaderTimes:
        fields:
          leaderTimes: map<Namespace, LeaderTime>

services:
  ConjureTimelockService:
    name: Timelock service
    default-auth: header
    package: com.palantir.atlasdb.timelock.api
    base-path: /tl
    endpoints:
      startTransactions:
        http: POST /st/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureStartTransactionsRequest
        tags:
          - server-request-context
        returns: ConjureStartTransactionsResponse
      getFreshTimestamps:
        http: POST /ts/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureGetFreshTimestampsRequest
        tags:
          - server-request-context
        returns: ConjureGetFreshTimestampsResponse
      getFreshTimestampsV2:
        http: POST /t2/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureGetFreshTimestampsRequestV2
        tags:
          - server-request-context
        returns: ConjureGetFreshTimestampsResponseV2
      getFreshTimestamp:
        http: POST /ts1/{namespace}
        args:
          namespace:
            type: string
            safety: safe
        tags:
          - server-request-context
        returns: ConjureSingleTimestamp
      leaderTime:
        http: POST /lt/{namespace}
        args:
          namespace:
            type: string
            safety: safe
        tags:
          - server-request-context
        returns: LeaderTime
      lock:
        http: POST /l/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureLockRequest
        tags:
          - server-request-context
        returns: ConjureLockResponse
      waitForLocks:
        http: POST /wl/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureLockRequest
        tags:
          - server-request-context
        returns: ConjureWaitForLocksResponse
      refreshLocks:
        http: POST /rl/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureRefreshLocksRequest
        tags:
          - server-request-context
        returns: ConjureRefreshLocksResponse
      refreshLocksV2:
        http: POST /rl2/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureRefreshLocksRequestV2
        tags:
          - server-request-context
        returns: ConjureRefreshLocksResponseV2
      unlock:
        http: POST /ul/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureUnlockRequest
        tags:
          - server-request-context
        returns: ConjureUnlockResponse
      unlockV2:
        http: POST /ul2/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: ConjureUnlockRequestV2
        tags:
          - server-request-context
        returns: ConjureUnlockResponseV2
      getCommitTimestamps:
        http: POST /gct/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: GetCommitTimestampsRequest
        tags:
          - server-request-context
        returns: GetCommitTimestampsResponse
        docs: |
          Batched endpoint for acquiring commit timestamps (a list of fresh timestamps) and the list of all lock watch
          events since the last known version up to after the commit timestamps have been issued.
      getCommitTimestamp:
        http: POST /g1ct/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: GetCommitTimestampRequest
        tags:
          - server-request-context
        returns: GetCommitTimestampResponse
  ConjureLockWatchingService:
    name: Lock Watching service
    default-auth: header
    package: com.palantir.atlasdb.timelock.lock.watch
    base-path: /lw
    endpoints:
      startWatching:
        http: POST /sw/{namespace}
        args:
          namespace:
            type: string
            safety: safe
          request: LockWatchRequest
        tags:
          - server-request-context
  MultiClientConjureTimelockService:
    name: Multi Client Timelock Service
    default-auth: header
    package: com.palantir.atlasdb.timelock.api
    base-path: /tl/multi
    endpoints:
      leaderTimes:
        http: POST /lts
        args:
          namespaces: set<Namespace>
        tags:
          - server-request-context
        returns: LeaderTimes
        docs: |
          Version of ConjureTimelockService#leaderTime endpoint for acquiring leaderTimes for a set of namespaces.
      startTransactions:
        http: POST /sts
        deprecated: |
          This endpoint is deprecated. Please use {@link #startTransactionsForClients} to start transactions for multiple clients.
        args:
          requests: map<Namespace, ConjureStartTransactionsRequest>
        tags:
          - server-request-context
        returns: map<Namespace, ConjureStartTransactionsResponse>
        docs: |
          Version of ConjureTimelockService#startTransactions that starts transactions for multiple namespaces.
      getCommitTimestamps:
        http: POST /gcts
        deprecated: |
          This endpoint is deprecated. Please use {@link #getCommitTimestampsForClients} to get commit timestamps for multiple clients.
        args:
          requests: map<Namespace, GetCommitTimestampsRequest>
        tags:
          - server-request-context
        returns: map<Namespace, GetCommitTimestampsResponse>
        docs: |
          Version of ConjureTimelockService#getCommitTimestamps for acquiring commit timestamps for multiple namespaces.
      startTransactionsForClients:
        http: POST /stsfc
        args:
          requests: map<Namespace, ConjureStartTransactionsRequest>
        tags:
          - server-request-context
        returns: map<Namespace, ConjureStartTransactionsResponse>
        docs: |
          Version of ConjureTimelockService#startTransactions that starts transactions for multiple namespaces.
      getCommitTimestampsForClients:
        http: POST /gctsfc
        args:
          requests: map<Namespace, GetCommitTimestampsRequest>
        tags:
          - server-request-context
        returns: map<Namespace, GetCommitTimestampsResponse>
        docs: |
          Version of ConjureTimelockService#getCommitTimestamps for acquiring commit timestamps for multiple namespaces.
      unlock:
        http: POST /ul
        args:
          requests: map<Namespace, ConjureUnlockRequestV2>
        tags:
          - server-request-context
        returns: map<Namespace, ConjureUnlockResponseV2>
        docs: |
          Version of unlockV2 to unlock locks across multiple namespaces.
