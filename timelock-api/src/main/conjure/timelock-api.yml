types:
  imports:
    LeaderTime:
      base-type: any
      external:
        java: com.palantir.lock.v2.LeaderTime
    NanoTime:
      base-type: safelong
      external:
        java: com.palantir.common.time.NanoTime
    PartitionedTimestamps:
      base-type: any
      external:
        java: com.palantir.lock.v2.PartitionedTimestamps
    LockImmutableTimestampResponse:
      base-type: any
      external:
        java: com.palantir.lock.v2.LockImmutableTimestampResponse
    Lease:
      base-type: any
      external:
        java: com.palantir.lock.v2.Lease
    LockWatchStateUpdate:
      base-type: any
      external:
        java: com.palantir.lock.watch.LockWatchStateUpdate
    Long:
      base-type: any
      external:
        java: java.lang.Long

  definitions:
    default-package: com.palantir.atlasdb.timelock.api
    objects:
      ConjureStartTransactionsRequest:
        fields:
          requestId: uuid
          requestorId: uuid
          numTransactions: integer
          lastKnownVersion: optional<Long>
      ConjureStartTransactionsResponse:
        fields:
          immutableTimestamp: LockImmutableTimestampResponse
          timestamps: PartitionedTimestamps
          lease: Lease
          lockWatchUpdate: LockWatchStateUpdate
      ConjureGetFreshTimestampsRequest:
        fields:
          numTimestamps: integer
      ConjureGetFreshTimestampsResponse:
        fields:
          inclusiveLower: Long
          inclusiveUpper: Long
      ConjureLockDescriptor:
        alias: binary
      ConjureLockRequest:
        fields:
          requestId: uuid
          lockDescriptors: set<ConjureLockDescriptor>
          acquireTimeoutMs: integer
          clientDescription: optional<string>
      ConjureLockToken:
        fields:
          requestId: uuid
      SuccessfulLockResponse:
        fields:
          lockToken: ConjureLockToken
          lease: Lease
      UnsuccessfulLockResponse:
        fields: {}
      ConjureLockResponse:
        union:
          successful: SuccessfulLockResponse
          unsuccessful: UnsuccessfulLockResponse
      ConjureWaitForLocksResponse:
        fields:
          wasSuccessful: boolean
      ConjureRefreshLocksRequest:
        fields:
          tokens: set<ConjureLockToken>
      ConjureRefreshLocksResponse:
        fields:
          refreshedTokens: set<ConjureLockToken>
          lease: Lease
      ConjureUnlockRequest:
        fields:
          tokens: set<ConjureLockToken>
      ConjureUnlockResponse:
        fields:
          tokens: set<ConjureLockToken>
      GetCommitTimestampsRequest:
        fields:
          numTimestamps: integer
          lastKnownVersion: optional<Long>
      GetCommitTimestampsResponse:
        fields:
          inclusiveLower: Long
          inclusiveUpper: Long
          lockWatchUpdate: LockWatchStateUpdate


services:
  ConjureTimelockService:
    name: Timelock service
    default-auth: header
    package: com.palantir.atlasdb.timelock.api
    base-path: /tl
    endpoints:
      startTransactions:
        http: POST /st/{namespace}
        args:
          namespace: string
          request: ConjureStartTransactionsRequest
        returns: ConjureStartTransactionsResponse
      getFreshTimestamps:
        http: POST /ts/{namespace}
        args:
          namespace: string
          request: ConjureGetFreshTimestampsRequest
        returns: ConjureGetFreshTimestampsResponse
      leaderTime:
        http: POST /lt/{namespace}
        args:
          namespace: string
        returns: LeaderTime
      lock:
        http: POST /l/{namespace}
        args:
          namespace: string
          request: ConjureLockRequest
        returns: ConjureLockResponse
      waitForLocks:
        http: POST /wl/{namespace}
        args:
          namespace: string
          request: ConjureLockRequest
        returns: ConjureWaitForLocksResponse
      refreshLocks:
        http: POST /rl/{namespace}
        args:
          namespace: string
          request: ConjureRefreshLocksRequest
        returns: ConjureRefreshLocksResponse
      unlock:
        http: POST /ul/{namespace}
        args:
          namespace: string
          request: ConjureUnlockRequest
        returns: ConjureUnlockResponse

      getCommitTimestamps:
        http: POST /gct/{namespace}
        args:
          namespace: string
          request: GetCommitTimestampsRequest
        returns: GetCommitTimestampsResponse
        docs: |
          Batched endpoint for acquiring commit timestamps (a list of fresh timestamps) and the list of all lock watch
          events since the last known version up to after the commit timestamps have been issued.