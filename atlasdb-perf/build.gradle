
apply from: '../gradle/shared.gradle'

apply plugin: 'application'
mainClassName = 'com.palantir.atlasdb.performance.cli.AtlasDbPerfCli'
applicationName = 'atlasdb-perf'

schemas = ['com.palantir.atlasdb.performance.schema.StreamTestSchema']

dependencies {
    api project(':atlasdb-api')
    api project(':atlasdb-cassandra')
    api project(':atlasdb-client')
    api project(':atlasdb-client-protobufs')
    api project(':atlasdb-commons')
    api project(':atlasdb-config')
    api project(':atlasdb-dagger')
    api project(':atlasdb-dbkvs')
    api project(':atlasdb-dbkvs-hikari')
    api project(':atlasdb-impl-shared')
    api project(':commons-executors')
    api project(':leader-election-api')
    api project(':leader-election-impl')
    api project(':timestamp-api')

    implementation 'ch.qos.logback:logback-classic'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.google.errorprone:error_prone_annotations'
    implementation 'com.google.guava:guava'
    implementation 'com.google.protobuf:protobuf-java'
    implementation 'com.palantir.common:streams'
    implementation 'com.palantir.docker.compose:docker-compose-rule-core'
    implementation 'com.palantir.docker.compose:docker-compose-rule-junit4'
    implementation 'com.palantir.safe-logging:preconditions'
    implementation 'com.palantir.safe-logging:safe-logging'
    implementation 'commons-io:commons-io'
    implementation 'io.airlift:airline'
    implementation 'jakarta.inject:jakarta.inject-api'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api'
    implementation 'org.assertj:assertj-core'
    implementation 'org.awaitility:awaitility'
    implementation 'org.openjdk.jmh:jmh-core'
    implementation 'org.reflections:reflections'
    implementation 'org.slf4j:slf4j-api'

    testImplementation 'com.google.guava:guava'
    testImplementation 'org.apache.commons:commons-math3'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'

    annotationProcessor 'org.immutables:value'
    annotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess'
    compileOnly 'org.immutables:value::annotations'
    compileOnly 'org.openjdk.jmh:jmh-generator-annprocess'
}

distZip {
    into(project.name + '-' + project.version) {
        from '..'
        include 'docker-containers/**/*'
    }
}

