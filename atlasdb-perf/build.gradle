apply from: "../gradle/publish-jars.gradle"
apply plugin: 'org.inferred.processors'

apply from: '../gradle/shared.gradle'

apply plugin: 'application'
mainClassName = 'com.palantir.atlasdb.performance.cli.AtlasDbPerfCli'
applicationName = 'atlasdb-perf'

dependencies {
  compile project(':atlasdb-api')
  compile project(':atlasdb-dagger')
  compile project(':atlasdb-dbkvs')
  compile project(':atlasdb-cassandra')

  compile group: 'io.airlift', name: 'airline', version: '0.7'
  compile group: 'org.reflections', name: 'reflections', version: '0.9.10'
  compile group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4'
  compile group: 'ch.qos.logback', name: 'logback-classic'

  testCompile group: 'org.assertj', name: 'assertj-core'
  testCompile group: 'org.mockito', name: 'mockito-core'

  compile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.13'
  processor group: 'org.immutables', name: 'value'
  processor(group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.13') {
      // We need to explicitly exclude these so that intellij does not label them as provided
      if(gradle.startParameter.taskNames.contains('idea')) {
          exclude group: 'org.openjdk.jmh', module: 'jmh-core'
      }
  }
}

distZip {
    into(project.name + '-' + project.version) {
        from '..'
        include 'docker-containers/**/*'
    }
}

task postgresBenchmarkTest(type:Exec) {
    logging.captureStandardOutput LogLevel.LIFECYCLE
    dependsOn(installDist)
    commandLine project.buildDir.toString() + "/install/atlasdb-perf/bin/atlasdb-perf", "--test-run", "--backend", "POSTGRES"
}

task cassandraBenchmarkTest(type:Exec) {
    logging.captureStandardOutput LogLevel.LIFECYCLE
    dependsOn(installDist)
    commandLine project.buildDir.toString() + "/install/atlasdb-perf/bin/atlasdb-perf", "SweepBenchmarks.batchedSingleSweepRun", "--test-run", "--backend", "CASSANDRA"
}

test.dependsOn postgresBenchmarkTest
test.dependsOn cassandraBenchmarkTest

gradle.taskGraph.beforeTask { Task task ->
    if (task.name.contains("BenchmarkTest")) {
        logger.lifecycle("")
        logger.lifecycle(task.name + " STARTED")
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (task.name.contains("BenchmarkTest")) {
        logger.lifecycle("")
        if (state.failure) {
            logger.lifecycle(task.name + " FAILED")
            logger.error(state.failure.printStackTrace())
        } else {
            logger.lifecycle(task.name + " PASSED")
        }
    }
}
