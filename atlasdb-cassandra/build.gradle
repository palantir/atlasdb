apply from: "../gradle/shared.gradle"
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.palantir.metric-schema'
apply plugin: 'com.palantir.revapi'

configurations {
  explicitShadow
  shadow.extendsFrom(explicitShadow)
  implementation.extendsFrom(explicitShadow)
}

dependencies {
  // does shadowing statically analysed annotations really buy us anything?
  explicitShadow 'com.google.code.findbugs:findbugs-annotations'
  explicitShadow 'com.google.code.findbugs:jsr305'
  explicitShadow 'com.google.guava:guava'
  explicitShadow 'com.palantir.conjure.java.api:ssl-config'
  explicitShadow 'com.palantir.conjure.java.runtime:keystores'
  explicitShadow 'com.palantir.nylon:nylon-threads'
  explicitShadow 'com.palantir.safe-logging:safe-logging'
  explicitShadow 'com.palantir.tracing:tracing'
  explicitShadow 'org.apache.commons:commons-pool2'
  explicitShadow 'org.jboss.marshalling:jboss-marshalling'
  explicitShadow project(":atlasdb-api")
  explicitShadow project(":atlasdb-client")
  explicitShadow project(":atlasdb-impl-shared")
  explicitShadow project(":commons-api")
  explicitShadow project(':timestamp-impl')
  shadow ('com.palantir.cassandra:cassandra-thrift') {
    exclude group: 'org.apache.httpcomponents'
  }
  implementation ('com.palantir.cassandra:cassandra-thrift')
  explicitShadow ('com.datastax.cassandra:cassandra-driver-core') {
    exclude(group: 'com.codahale.metrics', module: 'metrics-core')
  }
  implementation 'org.apache.httpcomponents.client5:httpclient5'
  implementation 'com.fasterxml.jackson.core:jackson-annotations'
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.github.ben-manes.caffeine:caffeine'
  implementation 'com.github.rholder:guava-retrying'
  implementation 'com.google.auto.service:auto-service-annotations'
  implementation 'com.google.errorprone:error_prone_annotations'
  implementation 'com.google.protobuf:protobuf-java'
  implementation 'com.palantir.common:streams'
  implementation 'com.palantir.conjure.java.api:service-config'
  implementation 'com.palantir.refreshable:refreshable'
  implementation 'com.palantir.safe-logging:preconditions'
  implementation 'com.palantir.safe-logging:safe-logging'
  implementation 'com.palantir.tritium:tritium-caffeine'
  implementation 'com.palantir.tritium:tritium-registry'
  implementation 'io.dropwizard.metrics:metrics-core'
  implementation 'one.util:streamex'
  implementation 'org.apache.commons:commons-lang3'
  implementation 'org.apache.thrift:libthrift'
  implementation 'org.slf4j:slf4j-api'
  implementation project(':atlasdb-commons')
  implementation project(':commons-annotations')
  implementation project(':commons-executors')
  implementation project(':timelock-api')
  implementation project(':timestamp-api')

  // transitive from cassandra-driver-core
  // need to specify as a direct dep so downstream projects get the correct version
  runtimeOnly 'io.netty:netty-handler'

  testImplementation 'commons-codec:commons-codec'
  testImplementation 'com.fasterxml.jackson.core:jackson-databind'
  testImplementation 'com.google.protobuf:protobuf-java'
  testImplementation 'com.palantir.common:streams'
  testImplementation 'com.palantir.conjure.java.api:service-config'
  testImplementation 'com.palantir.refreshable:refreshable'
  testImplementation 'com.palantir.safe-logging:preconditions'
  testImplementation 'com.palantir.tracing:tracing-api'
  testImplementation 'com.palantir.tritium:tritium-registry'
  testImplementation 'io.dropwizard.metrics:metrics-core'
  testImplementation 'org.apache.commons:commons-lang3'
  testImplementation 'org.apache.thrift:libthrift'
  testImplementation 'com.palantir.safe-logging:preconditions-assertj'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.awaitility:awaitility'
  testImplementation 'org.mockito:mockito-core'
  testImplementation 'uk.org.lidalia:slf4j-test'
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.mockito:mockito-junit-jupiter'
  testImplementation project(":atlasdb-config")
  testImplementation project(path: ":atlasdb-client", configuration: "testArtifacts")
  testImplementation project(':atlasdb-client-protobufs')
  testImplementation project(':atlasdb-commons')
  testImplementation project(':commons-executors')
  testImplementation('org.jmock:jmock') {
    exclude group: 'org.hamcrest'
  }
  testImplementation ('com.palantir.cassandra:cassandra-thrift') {
    exclude group: 'commons-logging'
    exclude module: 'junit'
    exclude group: 'org.apache.httpcomponents'
  }

  annotationProcessor 'com.google.auto.service:auto-service'
  annotationProcessor 'org.derive4j:derive4j'
  annotationProcessor 'org.immutables:value'
  annotationProcessor project(":atlasdb-processors")
  compileOnly 'org.derive4j:derive4j-annotation'
  compileOnly 'org.immutables:value::annotations'
  compileOnly project(":atlasdb-processors")
  testCompileOnly 'org.immutables:value::annotations'
}

shadowJar {
  mergeServiceFiles()
  classifier ''

  relocate('org.hibernate', 'shadowed')

  dependencies {
      include(dependency { false })
  }
}

jar.dependsOn shadowJar
jar.onlyIf { false }

apply plugin: 'com.palantir.sls-recommended-dependencies'

license {
  exclude '**/CassandraTopologyValidationMetrics.java'
}

recommendedProductDependencies {
    productDependency {
        productGroup = 'com.palantir.rescue'
        productName = 'rescue'
        minimumVersion = '4.220.0' // transactions3 support
        maximumVersion = '4.x.x'
    }

    productDependency {
        productGroup = 'com.palantir.cassandra'
        productName = 'sls-cassandra'
        minimumVersion = '3.31.0'
        maximumVersion = '6.x.x'
    }
}
