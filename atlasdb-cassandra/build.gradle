apply plugin: 'com.github.johnrengelman.shadow'

apply from: "../gradle/shared.gradle"

configurations {
  explicitShadow
  shadow.extendsFrom(explicitShadow)
  compile.extendsFrom(explicitShadow)
}

dependencies {
  explicitShadow group: 'com.palantir.safe-logging', name: 'safe-logging'

  explicitShadow project(":atlasdb-client")
  explicitShadow project(":atlasdb-processors")
  explicitShadow project(":atlasdb-api")
  explicitShadow project(":commons-api")
  explicitShadow project(':timestamp-impl')
  explicitShadow project(":atlasdb-impl-shared")

  explicitShadow ('com.palantir.cassandra:cassandra-thrift:' + libVersions.palantir_cassandra_thrift) {
    exclude group: 'org.apache.httpcomponents'
  }

  explicitShadow ('com.datastax.cassandra:cassandra-driver-core:' + libVersions.cassandra_driver_core) {
    exclude(group: 'com.codahale.metrics', module: 'metrics-core')
  }
  explicitShadow group: 'com.google.guava', name: 'guava'

  explicitShadow 'org.apache.commons:commons-pool2'

  explicitShadow group: 'com.palantir.conjure.java.api', name: 'ssl-config'
  explicitShadow group: 'com.palantir.conjure.java.runtime', name: 'keystores'
  explicitShadow group: 'com.palantir.tracing', name: 'tracing'

  explicitShadow group: 'com.squareup.okio', name: 'okio-jvm'

  // does shadowing statically analysed annotations really buy us anything?
  explicitShadow group: 'com.google.code.findbugs', name: 'findbugs-annotations'
  explicitShadow group: 'com.google.code.findbugs', name: 'jsr305'

  explicitShadow group: 'org.jboss.marshalling', name: 'jboss-marshalling', version: '1.4.11.Final'

  testImplementation project(path: ":atlasdb-client", configuration: "testArtifacts")
  testImplementation project(":atlasdb-config")
  testImplementation group: 'com.palantir.safe-logging', name: 'preconditions-assertj'
  testImplementation group: 'org.mockito', name: 'mockito-core'
  testImplementation group: 'org.assertj', name: 'assertj-core'
  testImplementation group: 'org.awaitility', name: 'awaitility'
  testImplementation group: 'uk.org.lidalia', name: 'slf4j-test', version: '1.1.0'
  testImplementation(group: 'org.jmock', name: 'jmock') {
      exclude group: 'org.hamcrest'
  }

  implementation 'com.fasterxml.jackson.core:jackson-annotations'
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.github.ben-manes.caffeine:caffeine'
  implementation 'com.google.auto.service:auto-service-annotations'
  implementation 'com.google.errorprone:error_prone_annotations'
  implementation 'com.google.protobuf:protobuf-java'
  implementation 'com.palantir.cassandra:cassandra-all'
  implementation 'com.palantir.common:streams'
  implementation 'com.palantir.conjure.java.api:service-config'
  implementation 'com.palantir.refreshable:refreshable'
  implementation 'com.palantir.safe-logging:preconditions'
  implementation 'com.palantir.tritium:tritium-caffeine'
  implementation 'com.palantir.tritium:tritium-metrics'
  implementation 'com.palantir.tritium:tritium-registry'
  implementation 'com.squareup.okio:okio-jvm'
  implementation 'io.dropwizard.metrics:metrics-core'
  implementation 'org.apache.commons:commons-lang3'
  implementation 'org.apache.thrift:libthrift'
  implementation 'org.slf4j:slf4j-api'
  implementation project(':atlasdb-commons')
  implementation project(':commons-annotations')
  implementation project(':commons-executors')
  implementation project(':timestamp-api')

  testImplementation 'com.fasterxml.jackson.core:jackson-databind'
  testImplementation 'com.google.protobuf:protobuf-java'
  testImplementation 'com.palantir.cassandra:cassandra-all'
  testImplementation 'com.palantir.common:streams'
  testImplementation 'com.palantir.conjure.java.api:service-config'
  testImplementation 'com.palantir.refreshable:refreshable'
  testImplementation 'com.palantir.safe-logging:preconditions'
  testImplementation 'com.palantir.tritium:tritium-registry'
  testImplementation 'com.squareup.okio:okio-jvm'
  testImplementation 'io.dropwizard.metrics:metrics-core'
  testImplementation 'org.apache.commons:commons-lang3'
  testImplementation 'org.apache.thrift:libthrift'
  testImplementation 'com.palantir.tracing:tracing-api'
  testImplementation project(':atlasdb-client-protobufs')
  testImplementation project(':atlasdb-commons')
  testImplementation project(':commons-executors')

  annotationProcessor group: 'org.immutables', name: 'value'
  compileOnly 'org.immutables:value::annotations'
  testCompileOnly 'org.immutables:value::annotations'
  annotationProcessor 'com.google.auto.service:auto-service'
  compileOnly 'com.google.auto.service:auto-service'
  annotationProcessor project(":atlasdb-processors")
  compileOnly project(":atlasdb-processors")
}

shadowJar {
  mergeServiceFiles()
  classifier ''

  dependencies {
      include(dependency { false })
  }
}

jar.dependsOn shadowJar
jar.onlyIf { false }

apply plugin: 'com.palantir.sls-recommended-dependencies'

recommendedProductDependencies {
    productDependency {
        productGroup = 'com.palantir.rescue'
        productName = 'rescue'
        minimumVersion = '4.137.0'
        maximumVersion = '4.x.x'
    }

    productDependency {
        productGroup = 'com.palantir.cassandra'
        productName = 'sls-cassandra'
        minimumVersion = '3.31.0'
        maximumVersion = '6.x.x'
    }
}
