
apply from: '../gradle/shared.gradle'
apply plugin: 'com.palantir.metric-schema'

libsDirName = file('build/artifacts')

license {
  exclude '**/ConsensusForgettingStoreMetrics.java'
  exclude '**/TargetedSweepProgressMetrics.java'
  exclude '**/TimestampCorrectnessMetrics.java'
}

dependencies {
  api 'com.github.ben-manes.caffeine:caffeine'
  api project(':atlasdb-api')
  api project(':atlasdb-autobatch')
  api project(':atlasdb-client')
  api project(':atlasdb-client-protobufs')
  api project(':atlasdb-commons')
  api project(':atlasdb-coordination-impl')
  api project(':commons-annotations')
  api project(':commons-executors')
  api project(':commons-executors-api')
  api project(':lock-api')
  api project(':lock-api-objects')
  api project(':lock-impl')
  api project(':timelock-api:timelock-api-jersey')
  api project(':timelock-api:timelock-api-objects')
  api project(':timestamp-api')
  api project(':timestamp-client')

  implementation 'com.fasterxml.jackson.core:jackson-annotations'
  implementation 'com.fasterxml.jackson.core:jackson-core'
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
  implementation 'com.google.auto.service:auto-service-annotations'
  implementation 'com.google.guava:guava'
  implementation 'com.google.protobuf:protobuf-java'
  implementation 'com.palantir.common:streams'
  implementation 'com.palantir.conjure.java.api:service-config'
  implementation 'com.palantir.conjure.java.runtime:conjure-java-jackson-optimizations'
  implementation 'com.palantir.conjure.java.runtime:conjure-java-jackson-serialization'
  implementation 'com.palantir.conjure.java.runtime:conjure-java-jersey-server'
  implementation 'com.palantir.refreshable:refreshable'
  implementation 'com.palantir.safe-logging:preconditions'
  implementation 'com.palantir.safe-logging:safe-logging'
  implementation 'com.palantir.tokens:auth-tokens'
  implementation 'com.palantir.tracing:tracing'
  implementation 'io.dropwizard.metrics:metrics-core'
  implementation 'io.vavr:vavr'
  implementation 'jakarta.validation:jakarta.validation-api'
  implementation 'jakarta.ws.rs:jakarta.ws.rs-api'
  implementation 'org.apache.commons:commons-lang3'
  implementation 'org.checkerframework:checker-qual'
  implementation 'org.slf4j:slf4j-api'

  testImplementation 'com.fasterxml.jackson.core:jackson-core'
  testImplementation 'com.fasterxml.jackson.core:jackson-databind'
  testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-guava'
  testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
  testImplementation 'com.google.code.findbugs:annotations'
  testImplementation 'com.google.guava:guava'
  testImplementation 'com.google.protobuf:protobuf-java'
  testImplementation 'com.palantir.conjure.java.api:errors'
  testImplementation 'com.palantir.conjure.java.api:service-config'
  testImplementation 'com.palantir.conjure.java.api:ssl-config'
  testImplementation 'com.palantir.conjure.java.runtime:client-config'
  testImplementation 'com.palantir.conjure.java.runtime:conjure-java-jaxrs-client'
  testImplementation 'com.palantir.conjure.java.runtime:conjure-java-legacy-clients'
  testImplementation 'com.palantir.conjure.java.runtime:keystores'
  testImplementation 'com.palantir.refreshable:refreshable'
  testImplementation 'com.palantir.safe-logging:preconditions-assertj'
  testImplementation 'io.dropwizard.metrics:metrics-core'
  testImplementation 'io.dropwizard.metrics:metrics-healthchecks'
  testImplementation 'io.dropwizard:dropwizard-core'
  testImplementation 'io.dropwizard:dropwizard-jersey'
  testImplementation 'io.dropwizard:dropwizard-jetty'
  testImplementation 'io.dropwizard:dropwizard-testing'
  testImplementation 'jakarta.ws.rs:jakarta.ws.rs-api'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.awaitility:awaitility'
  testImplementation 'org.eclipse.jetty:jetty-util'
  testImplementation 'org.mockito:mockito-core'
  testImplementation 'org.slf4j:slf4j-api'
  testImplementation project(':atlasdb-api')
  testImplementation project(':atlasdb-autobatch')
  testImplementation project(':atlasdb-client-protobufs')
  testImplementation project(':commons-annotations')
  testImplementation project(':commons-executors')
  testImplementation project(':lock-api')
  testImplementation project(':lock-api-objects')
  testImplementation project(':timelock-api:timelock-api-objects')
  testImplementation(group: 'org.jmock', name: 'jmock') {
    exclude group: 'org.hamcrest'
    exclude group: 'org.ow2.asm'
  }

  testRuntimeOnly 'ch.qos.logback:logback-classic'

  annotationProcessor 'com.google.auto.service:auto-service'
  annotationProcessor 'org.derive4j:derive4j'
  annotationProcessor 'org.immutables:value'
  annotationProcessor project(':atlasdb-processors')
  compileOnly 'com.google.auto.service:auto-service'
  compileOnly 'org.derive4j:derive4j-annotation'
  compileOnly 'org.immutables:value::annotations'
  compileOnly project(':atlasdb-processors')
  testAnnotationProcessor 'org.immutables:value'
  testCompileOnly 'org.immutables:value::annotations'
}

configurations.testImplementation {
  resolutionStrategy {
    // It sucks, but at least we can validate only on test
    force 'io.dropwizard.metrics:metrics-jmx:4.1.5'
  }
}
configurations.testCompileClasspath {
  resolutionStrategy {
    // It sucks, but at least we can validate only on test
    force 'io.dropwizard.metrics:metrics-jmx:4.1.5'
  }
}
configurations.testRuntimeOnly {
  resolutionStrategy {
    // It sucks, but at least we can validate only on test
    force 'io.dropwizard.metrics:metrics-jmx:4.1.5'
  }
}
configurations.testRuntimeClasspath {
  resolutionStrategy {
    // It sucks, but at least we can validate only on test
    force 'io.dropwizard.metrics:metrics-jmx:4.1.5'
  }
}
