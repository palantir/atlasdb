import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

apply from: "../gradle/publish-jars.gradle"
apply plugin: 'org.inferred.processors'
apply plugin: 'com.github.johnrengelman.shadow'

apply from: '../gradle/shared.gradle'
apply from: "../gradle/feign-shading.gradle"

configurations {
    daggerShadow
}

dependencies {
  compile project(':atlasdb-service')
  compile group: 'com.google.dagger', name: 'dagger'

  processor(group: 'com.google.dagger', name: 'dagger-compiler') {
    // We need to explicitly exclude these so that intellij does not label them as provided
    if(gradle.startParameter.taskNames.contains('idea')) {
      exclude group: 'com.google.dagger', module: 'dagger'
    }
  }
  processor group: 'org.immutables', name: 'value'

  shadow project(':atlasdb-service')
  daggerShadow project(':atlasdb-service')
}

shadowJar {
  mergeServiceFiles()
  classifier ''

  relocate('dagger', 'com.palantir.atlasdb.shaded.dagger')

  dependencies {
    include dependency(group: 'com.google.dagger', name: 'dagger')
  }
}

// ONLY shade Dagger. This is used in the AtlasDB CLI
task daggerShadowJar(type: ShadowJar) {
  mergeServiceFiles()
  classifier 'daggerShadow'
  from sourceSets.main.output
  configurations = [project.configurations.compile]

  relocate('dagger', 'com.palantir.atlasdb.shaded.dagger')

  // No need to explicitly exclude Feign because that is only added to the normal shadow jar task.
  dependencies {
    include dependency(group: 'com.google.dagger', name: 'dagger')
  }
}

artifacts {
  daggerShadow (tasks.daggerShadowJar.archivePath) {
    builtBy daggerShadowJar
  }
}

jar.dependsOn daggerShadowJar
jar.onlyIf { false }
