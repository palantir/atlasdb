apply from: "../gradle/shared.gradle"
apply from: "../gradle/tests.gradle"
apply from: "../gradle/non-client-dist.gradle"

apply plugin: 'com.palantir.sls-java-service-distribution'

schemas = ['com.palantir.atlasdb.blob.BlobSchema']
dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
    implementation 'com.google.errorprone:error_prone_annotations'
    implementation 'com.google.guava:guava'
    implementation 'com.google.protobuf:protobuf-java'
    implementation 'com.palantir.common:streams'
    implementation 'com.palantir.conjure.java.api:service-config'
    implementation 'com.palantir.conjure.java.runtime:conjure-java-jackson-serialization'
    implementation 'com.palantir.conjure.java.runtime:conjure-java-jersey-server'
    implementation 'com.palantir.safe-logging:preconditions'
    implementation 'com.palantir.safe-logging:safe-logging'
    implementation 'com.palantir.tritium:tritium-lib'
    implementation 'com.palantir.tritium:tritium-registry'
    implementation 'io.dropwizard.metrics:metrics-core'
    implementation 'io.dropwizard:dropwizard-configuration'
    implementation 'io.dropwizard:dropwizard-core'
    implementation 'io.dropwizard:dropwizard-jersey'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api'
    implementation 'org.awaitility:awaitility'
    implementation 'org.slf4j:slf4j-api'
    implementation project(':atlasdb-api')
    implementation project(':atlasdb-cassandra')
    implementation project(':atlasdb-client')
    implementation project(':atlasdb-client-protobufs')
    implementation project(':atlasdb-commons')
    implementation project(':atlasdb-config')
    implementation project(':atlasdb-coordination-impl')
    implementation project(':atlasdb-ete-test-utils')
    implementation project(':atlasdb-impl-shared')
    implementation project(':atlasdb-tests-shared')
    implementation project(':leader-election-impl')
    implementation project(':lock-api')
    implementation project(':lock-api-objects')
    implementation project(':lock-impl')
    implementation project(':timelock-api:timelock-api-undertow')
    implementation project(':timelock-impl')
    implementation project(':timestamp-api')
    implementation ('org.apache.thrift:libthrift') {
        exclude group: 'org.apache.httpcomponents'
    }

    testImplementation 'com.datastax.cassandra:cassandra-driver-core'
    testImplementation 'com.google.errorprone:error_prone_annotations'
    testImplementation 'com.google.guava:guava'
    testImplementation 'com.palantir.conjure.java.api:ssl-config'
    testImplementation 'com.palantir.conjure.java.api:test-utils'
    testImplementation 'com.palantir.conjure.java.runtime:keystores'
    testImplementation 'com.palantir.docker.compose:docker-compose-rule-junit4'
    testImplementation 'com.palantir.docker.proxy:docker-proxy-rule-junit4'
    testImplementation 'com.palantir.safe-logging:preconditions'
    testImplementation 'com.palantir.safe-logging:safe-logging'
    testImplementation 'commons-io:commons-io'
    testImplementation 'joda-time:joda-time'
    testImplementation 'org.slf4j:slf4j-api'
    testImplementation 'com.palantir.docker.compose:docker-compose-rule-core'
    testImplementation 'io.dropwizard:dropwizard-testing'
    testImplementation 'org.assertj:assertj-core'
    testImplementation project(':atlasdb-api')
    testImplementation project(':atlasdb-cassandra')
    testImplementation project(':atlasdb-cassandra').sourceSets.test.output
    testImplementation project(':atlasdb-client')
    testImplementation project(':atlasdb-container-test-utils')
    testImplementation project(':atlasdb-ete-test-utils')
    testImplementation project(':atlasdb-impl-shared')
    testImplementation project(':atlasdb-remoting-api')
    testImplementation project(':atlasdb-tests-shared')
    testImplementation project(':flake-rule')
    testImplementation project(':lock-api-objects')
    testImplementation project(':timestamp-api')
    testImplementation project(':timestamp-impl')
    testImplementation ('com.palantir.cassandra:cassandra-thrift') {
        exclude group: 'commons-logging'
        exclude module: 'junit'
        exclude group: 'org.apache.httpcomponents'
    }

    runtimeOnly project(':atlasdb-dbkvs')
    runtimeOnly project(':atlasdb-cassandra')

    annotationProcessor 'org.immutables:value'
    annotationProcessor project(':atlasdb-processors')
    compileOnly 'org.immutables:value::annotations'
    compileOnly project(':atlasdb-processors')
    testAnnotationProcessor 'org.immutables:value'
    testCompileOnly 'org.immutables:value::annotations'
}

// ETE Test Wiring
//
// For each non-trivially sized ETE test and all ETE test suites:
// - define a custom gradle task for just that test [suite]
// - remove that test [suite] from :atlasdb-ete-tests:test
// - add that custom task as a dependency of :customEteTasks, which :atlasdb-ete-tests:test then depends on
// - use task exclusion in our circleci commands to ensure only specific things get run in certain containers at CI time
//
// This does a few things:
// - for test suites, makes it easier to reason about which suite class executions belong to what test suites in the
//   generated junit reports and test suite cost in gradle build scans
// - allows us to run certain tests in their own containers for CI speed reasons
// - on the off chance someone adds or re-names a test in the future, but forgets to give it its own task and wiring
//   described above, that test will still get run via :atlasdb-ete-tests:test to avoid a situation where the new test
//   isn't run in CI without us realizing

// Tasks required before ETE tests can be run

task prepareForEteTests(type: Copy, dependsOn: 'distTar') {
    from distTar.outputs
    into 'build/docker/'

    rename { filename -> 'atlasdb-ete-snapshot.tgz' }
}

task prepareForTimelockEteTests() {
    dependsOn 'prepareForEteTests', ':timelock-server-distribution:dockerTag'
}

// Individual ETE Test Tasks

task timeLockMigrationTest(type: Test, dependsOn: 'prepareForTimelockEteTests') {
    filter {
        includeTestsMatching 'com.palantir.atlasdb.ete.standalone.TimeLockMigrationEteTest'
    }
}

task multiClientWithPostgresTimelockAndPostgresTest(type: Test, dependsOn: 'prepareForTimelockEteTests') {
    filter {
        includeTestsMatching 'com.palantir.atlasdb.ete.suites.MultiClientWithPostgresTimelockAndPostgresTestSuite'
    }
}

task multiClientWithTimelockAndCassandraTest(type: Test, dependsOn: 'prepareForTimelockEteTests') {
    filter {
        includeTestsMatching 'com.palantir.atlasdb.ete.suites.MultiClientWithTimelockAndCassandraTestSuite'
    }
}

task singleClientWithEmbeddedAndCassandraTest(type: Test, dependsOn: 'prepareForEteTests') {
    filter {
        includeTestsMatching 'com.palantir.atlasdb.ete.suites.SingleClientWithEmbeddedAndCassandraTestSuite'
    }
}

task singleClientWithEmbeddedAndOracleTest(type: Test, dependsOn: 'prepareForEteTests') {
    filter {
        includeTestsMatching 'com.palantir.atlasdb.ete.suites.SingleClientWithEmbeddedAndOracleTestSuite'
    }
}

task singleClientWithEmbeddedAndPostgresTest(type: Test, dependsOn: 'prepareForEteTests') {
    filter {
        includeTestsMatching 'com.palantir.atlasdb.ete.suites.SingleClientWithEmbeddedAndPostgresTestSuite'
    }
}

task singleClientWithEmbeddedAndThreeNodeCassandraTest(type: Test, dependsOn: 'prepareForEteTests') {
    filter {
        includeTestsMatching 'com.palantir.atlasdb.ete.suites.SingleClientWithEmbeddedAndThreeNodeCassandraTestSuite'
    }
}

// Re-wire 'test' to include custom tasks as dependencies via a single task instead of directly running them

task customEteTasks() {
    dependsOn multiClientWithPostgresTimelockAndPostgresTest,
        multiClientWithTimelockAndCassandraTest,
        singleClientWithEmbeddedAndCassandraTest,
        singleClientWithEmbeddedAndOracleTest,
        singleClientWithEmbeddedAndPostgresTest,
        singleClientWithEmbeddedAndThreeNodeCassandraTest
        // timeLockMigrationTest // intentionally not run on every commit/PR due to length
}

test {
    dependsOn customEteTasks

    filter {
        // in the expected case "test" doesn't actually have any tests to run because they're all in custom tasks
        // gradle would normally fail a task of type Test that doesn't actually have any tests to run
        setFailOnNoMatchingTests(false)

        // suite classes that should not be run outside of suites
        excludeTestsMatching 'com.palantir.atlasdb.ete.suiteclasses.*'

        // tests with 1-off tasks
        excludeTestsMatching 'com.palantir.atlasdb.ete.standalone.TimeLockMigrationEteTest'
        excludeTestsMatching 'com.palantir.atlasdb.ete.suites.MultiClientWithPostgresTimelockAndPostgresTestSuite'
        excludeTestsMatching 'com.palantir.atlasdb.ete.suites.MultiClientWithTimelockAndCassandraTestSuite'
        excludeTestsMatching 'com.palantir.atlasdb.ete.suites.SingleClientWithEmbeddedAndCassandraTestSuite'
        excludeTestsMatching 'com.palantir.atlasdb.ete.suites.SingleClientWithEmbeddedAndOracleTestSuite'
        excludeTestsMatching 'com.palantir.atlasdb.ete.suites.SingleClientWithEmbeddedAndPostgresTestSuite'
        excludeTestsMatching 'com.palantir.atlasdb.ete.suites.SingleClientWithEmbeddedAndThreeNodeCassandraTestSuite'
    }
}

distribution {
    serviceName 'atlasdb-ete'
    mainClass 'com.palantir.atlasdb.AtlasDbEteServer'
    args 'server', 'var/conf/atlasdb-ete.yml'
    defaultJvmOpts '-Xmx768M'
}

