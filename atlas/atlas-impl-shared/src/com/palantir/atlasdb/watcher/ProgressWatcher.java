// Copyright 2015 Palantir Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package com.palantir.atlasdb.watcher;


/**
 * A watcher is used for reporting progress information on long-running tasks.
 *
 * @author jweel
 */
public interface ProgressWatcher {
    /**
     * Create a root watch
     */
    Watch watch(String subPathNameComponent, String subInstanceNameComponentFormat, Object... subInstanceNameComponentArgs);

    /**
     * Create a root watch with an autogenerated instanceName
     */
    Watch watch(String subPathNameComponent);


    /**
     * Report total time spent on tasks with this pathName.
     */
    void total(String... pathNameComponents);

    /**
     * Equivalent to calling total(pathName) on every pathName used so far
     */
    void totals();

    /**
     * The {@link ProgressWatcher} does not actually know how to report anything. It delegates that to
     * {@link Reporter}s. You should probably add at least one.
     */
    void addReporter(Reporter reporter);

    /**
     * A watch represents an individual task. Every time you do "the same" task, the path name of
     * the task should be the same, but the instance name should be different. If you cannot think
     * of a descriptive instance name, leave it out (which sets it to ""). Sequential integers will
     * be used to identify watches in the absence of unique instanceNames.
     */
    interface Watch {
        /**
         * Create a child watch
         */
        Watch watch(String subPathNameComponent, String subInstanceNameComponentFormat, Object... subInstanceNameComponentArgs);

        /**
         * Create a child watch with an autogenerated instanceName
         */
        Watch watch(String subPathNameComponent);

        /**
         * Use in combination with step() to indicate that the task being watch is expected to
         * consist of a certain fixed number of items.
         */
        Watch expect(int MaxSteps, String itemsName);

        /**
         * Use in combination with step() to indicate that the task being watch is expected to
         * consist of an unknown number of items.
         */
        Watch expect(String itemsName);

        /**
         * Output some additional information related to the current task
         */
        Watch say(String key, Object val);

        /**
         * Report that a certain number of steps have been taken
         */
        Watch step(int dSteps);

        /**
         * Shorthand for step(1)
         */
        Watch step();

        /**
         * Report that the task has finished.
         */
        void done();
    }

    /**
     * A reporter is used by a watcher to report the events and data it keeps track of. A few are
     * supplied here, but you can also implement your own. For instance, you could write a GUI
     * reporter, or a reporter that writes to a remote monitoring service.
     *
     * @author jweel
     */
    interface Reporter {
        void start(String name);

        void stop(String name, long durationMillis);

        void step(String name, int steps, int maxSteps, String itemsName);

        void total(String name, long durationMillis);

        void say(String name, String format, Object... args);
    }
}
