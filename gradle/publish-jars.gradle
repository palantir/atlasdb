import java.util.stream.Collectors;

apply plugin: 'java-library'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'
apply plugin: 'nebula.maven-resolved-dependencies'

// If you modify bintray or artifactory publishing you also need to modify publish-dists.gradle

task sourceJar(type: Jar) {
    from project.sourceSets.main.allSource
    classifier 'sources'
}

task testJar(type: Jar) {
    from project.sourceSets.test.output
    classifier 'tests'
}

publishing {
    publications {
        artifactory(MavenPublication) {
            from components.java

            // This interfaces between Shadow and Nebula
            def hasShadowConfiguration = project.configurations.findByName('shadow') != null
            if (hasShadowConfiguration) {
                replaceShadedDependencies(it)
            }

            artifact(sourceJar) {
                classifier 'sources'
            }
            artifact(testJar) {
                classifier 'tests'
            }
            pom.withXml {
                def scm = asNode().appendNode('scm')
                scm.appendNode('url', 'git@github.com:palantir/atlasdb.git')
                def licenses = asNode().appendNode('licenses')
                def license = licenses.appendNode('license')
                license.appendNode('name', 'Apache 2.0')
                license.appendNode('url', 'https://opensource.org/licenses/Apache-2.0')
            }
        }
    }
}

private void replaceShadedDependencies(MavenPublication mavenPublication) {
    mavenPublication.pom.withXml {
        def shadowDependencies = getShadowDependencies(project)

        def newDependencyRoot = new Node(null, 'dependencies')
        def existingDependencies = asNode().getByName('dependencies')[0]
        existingDependencies.children().forEach { dependency ->
            if (hasMatchingDependency(
                    shadowDependencies,
                    getGroupIdFromNode(dependency),
                    getArtifactIdFromNode(dependency))) {
                newDependencyRoot.append(dependency)
            }
            shadowDependencies.remove(new Tuple(getGroupIdFromNode(dependency), getArtifactIdFromNode(dependency)))
        }

        addNodesForShadowDependenciesNotInCompileConfiguration(
                newDependencyRoot,
                shadowDependencies,
                dependencyRecommendations)

        asNode().getByName('dependencies')[0].replaceNode(newDependencyRoot)
    }
}

private static Set<Tuple> getShadowDependencies(Project project) {
    def rawDependencySet = project.configurations.getByName('shadow').allDependencies
    return rawDependencySet.stream()
                           .map({dep -> new Tuple(dep.getGroup(), dep.getName())})
                           .collect(Collectors.toSet())
}

// Returns true if and only if there exists some dependency in the provided list of dependencies.
private static boolean hasMatchingDependency(Set<Tuple> dependencies, String groupId, String artifactId) {
    return dependencies.contains(new Tuple(groupId, artifactId));
}

// We assume that there is only one groupId tag, which has exactly one element in it.
private static String getGroupIdFromNode(Node dependency) {
    return getOnlyValue(dependency.groupId)
}

// We assume that there is only one artifactId tag, which has exactly one element in it.
private static String getArtifactIdFromNode(Node dependency) {
    return getOnlyValue(dependency.artifactId)
}

private static String getOnlyValue(List<Node> nodeList) {
    if (nodeList.size() != 1 || nodeList[0].children().size() != 1) {
        throw new IllegalArgumentException("getOnlyValue() called on a node list which didn't have an only value");
    }
    return nodeList[0].children()[0]
}

private static void addNodesForShadowDependenciesNotInCompileConfiguration(
        Node dependencyRoot,
        Set<Tuple> remainingDeps,
        recommender) {
    remainingDeps.forEach { dependencyTuple ->
        Node newDependency = dependencyRoot.appendNode('dependency')
        newDependency.appendNode('groupId', dependencyTuple[0])
        newDependency.appendNode('artifactId', dependencyTuple[1])
        newDependency.appendNode('scope', 'runtime')

        def version = recommender.getRecommendedVersion(dependency.getGroup(), dependency.getName())
        newDependency.appendNode('version', version)
    }
}

// Bintray publish
bintray {
    user = System.getenv('BINTRAY_USERNAME')
    key = System.getenv('BINTRAY_PASSWORD')
    publish = true
    pkg {
        userOrg = 'palantir'
        repo = 'releases'
        name = 'atlasdb'
        licenses = ['Apache-2.0']
        publications = ['artifactory']
    }
}

bintrayUpload.onlyIf {
    System.getenv('BINTRAY_USERNAME') && System.getenv('BINTRAY_PASSWORD') && project.version ==~ releaseVersionRegex
}

bintrayUpload.dependsOn 'generatePomFileForArtifactoryPublication', 'sourceJar', 'testJar', 'build'

// Artifactory publish
artifactory {
    publish {
        contextUrl = System.env.ARTIFACTORY_URL
        repository {
            repoKey = System.env.ARTIFACTORY_JAR_REPO
            username = System.env.ARTIFACTORY_USERNAME
            password = System.env.ARTIFACTORY_PASSWORD
            maven = true
        }
        defaults {
            publications ('artifactory')
            properties = ['git': project.version.toString()]
        }
    }
}

artifactoryPublish.onlyIf {
    System.getenv('ARTIFACTORY_USERNAME') && System.getenv('ARTIFACTORY_PASSWORD') && System.getenv('ARTIFACTORY_JAR_REPO') && System.getenv('ARTIFACTORY_URL') && !(project.version ==~ releaseVersionRegex)
}
artifactoryPublish.dependsOn 'generatePomFileForArtifactoryPublication', 'sourceJar', 'testJar', 'build'

ext {
    releaseVersionRegex = /\d+\.\d+\.\d+(-alpha|-beta|-rc)?(\d+)?/
}
