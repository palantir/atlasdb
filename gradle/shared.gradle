apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'com.github.hierynomus.license'

apply from: "${rootDir}/gradle/versions.gradle"

sourceCompatibility = 11

version = rootProject.version
group = rootProject.group

jar {
    manifest {
        attributes(
                'Implementation-Title'   : project.name,
                'Implementation-Version' : project.version,
                'Implementation-Vendor'  : 'Palantir Technologies, Inc.')
    }
}

libsDirName = file('build/artifacts')

dependencies {
    implementation 'com.google.code.findbugs:findbugs-annotations'
    implementation 'com.google.code.findbugs:jsr305'
    implementation 'com.palantir.safe-logging:logger'

    testImplementation 'junit:junit'
    testImplementation 'org.assertj:assertj-core'
}

checkImplicitDependencies {
    ignore 'com.boundary', 'high-scale-lib' // mistakenly flagged from cassandra-all, not used directly
}

checkUnusedDependencies {
    // not all modules may use these, but are always included above
    ignore 'com.google.code.findbugs', 'findbugs-annotations'
    ignore 'com.google.code.findbugs', 'jsr305'
    ignore 'com.palantir.safe-logging', 'logger'
    ignore 'junit', 'junit'
    ignore 'org.assertj', 'assertj-core'
}

apply from: rootProject.file('gradle/javadoc.gradle'), to: javadoc

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Palantir Technologies, Inc.')
    }
}

license {
    header rootProject.file('config/HEADER')
    skipExistingHeaders true

    ext.year = Calendar.getInstance().get(Calendar.YEAR)

    include '**/*.java'
    exclude '**/generated/**/*.java'
    exclude '**/RateLimiter.java'
    exclude '**/SmoothRateLimiter.java'
    exclude '**/DiscoverableSubtypeResolver.java'
    exclude '**/ConjureTimelockServiceBlockingMetrics.java'
    exclude '**/LeaderElectionMetrics.java'
}

ext {
    schemas = []
}

task generateSchemas {
    description = 'Re-generate code from AtlasDB schemas.'
    dependsOn classes, testClasses
    finalizedBy format
}

afterEvaluate {
    schemas.each { schema ->
        generateSchemas {
            doLast {
                logger.info "Processing schemas for ${schema}"
                javaexec {
                    main schema
                    classpath sourceSets.test.runtimeClasspath
                }
            }
        }
    }
}

tasks.withType(Test) {
    enableAssertions = true
}

task allCompileDeps(type: DependencyReportTask) {
    configurations = [project.configurations.getByName('api')]
}

ext.atlasdb_shaded = 'com.palantir.atlasdb.shaded.'
