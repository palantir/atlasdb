apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'com.github.hierynomus.license'

apply from: "${rootDir}/gradle/versions.gradle"
apply from: "${rootDir}/gradle/baseline.gradle"

sourceCompatibility = 1.8

version = rootProject.version
group = rootProject.group

jar {
    manifest {
        attributes(
                "Implementation-Title"   : project.name,
                "Implementation-Version" : project.version,
                "Implementation-Vendor"  : "Palantir Technologies, Inc.")
    }
}

libsDirName = file('build/artifacts')

dependencies {
    // Dont add Java8 compile/runtime dependencies here as commons-executors needs to be compatible with Java6 clients
    compile group: 'com.google.code.findbugs', name: 'jsr305'
    compile group: 'com.google.code.findbugs', name: 'findbugs-annotations'
    checkstyle group: 'com.puppycrawl.tools', name: 'checkstyle', version: libVersions.checkstyle
    testCompile group: 'junit', name: 'junit'
    testCompile group: 'org.assertj', name: 'assertj-core'
}

apply from: rootProject.file('gradle/javadoc.gradle'), to: javadoc

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Palantir Technologies, Inc.")
    }
}

license {
    header rootProject.file('config/HEADER')
    skipExistingHeaders true

    ext.year = Calendar.getInstance().get(Calendar.YEAR)

    include '**/*.java'
    exclude '**/generated/**/*.java'
    exclude '**/RateLimiter.java'
    exclude '**/SmoothRateLimiter.java'
    exclude '**/DiscoverableSubtypeResolver.java'
}

ext {
    schemas = []
}

task generateSchemas {
    description = 'Re-generate code from AtlasDB schemas.'
    dependsOn classes, testClasses
}

afterEvaluate {
    schemas.each { schema ->
        generateSchemas {
            doLast {
                logger.info "Processing schemas for ${schema}"
                javaexec {
                    main schema
                    classpath sourceSets.test.runtimeClasspath
                }
            }
        }
    }
}

tasks.withType(Test) {
    enableAssertions = true

    testLogging {
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        events "started", "passed", "skipped", "failed"
    }
}

task allCompileDeps(type: DependencyReportTask) {
    configurations = [project.configurations.getByName("compile")]
}

ext.atlasdb_shaded = 'com.palantir.atlasdb.shaded.'
