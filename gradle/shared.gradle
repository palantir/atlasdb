apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'com.github.hierynomus.license'
apply plugin: 'com.palantir.external-publish-jar'

version = rootProject.version
group = rootProject.group

jar {
    manifest {
        attributes(
                "Implementation-Title"   : project.name,
                "Implementation-Version" : project.version,
                "Implementation-Vendor"  : "Palantir Technologies, Inc.")
    }
}

task testJarForPublishing(type: Jar) {
    from project.sourceSets.test.output
    archiveClassifier = 'tests'
}

libsDirName = file('build/artifacts')

dependencies {
    implementation 'com.google.code.findbugs:jsr305'
    implementation 'com.google.code.findbugs:findbugs-annotations'
    implementation 'com.palantir.safe-logging:logger'
    implementation 'com.palantir.safe-logging:safe-logging'
}

checkUnusedDependencies {
    ignore 'com.google.code.findbugs', 'jsr305'
    ignore 'com.google.code.findbugs', 'findbugs-annotations'
    ignore 'com.palantir.safe-logging', 'logger'
    ignore 'com.palantir.safe-logging', 'safe-logging'
}

apply from: rootProject.file('gradle/javadoc.gradle'), to: javadoc

jar {
    manifest {
        attributes(
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Palantir Technologies, Inc.")
    }
}

license {
    header rootProject.file('config/HEADER')
    skipExistingHeaders true

    ext.year = Calendar.getInstance().get(Calendar.YEAR)

    include '**/*.java'
    exclude '**/generated/**/*.java'
    exclude '**/RateLimiter.java'
    exclude '**/SmoothRateLimiter.java'
    exclude '**/DiscoverableSubtypeResolver.java'
    exclude '**/ConjureTimelockServiceBlockingMetrics.java'
    exclude '**/LeaderElectionMetrics.java'
}

ext {
    schemas = []
}

task generateSchemas {
    description = 'Re-generate code from AtlasDB schemas.'
    dependsOn classes, testClasses
    finalizedBy format
}

afterEvaluate {
    schemas.each { schema ->
        generateSchemas {
            doLast {
                logger.info "Processing schemas for ${schema}"
                javaexec {
                    main schema
                    // need both compile & runtime classpath for schema generation
                    classpath sourceSets.test.compileClasspath + sourceSets.test.runtimeClasspath
                }
            }
        }
    }
}

tasks.withType(Test) {
    enableAssertions = true
    failFast = true
}

ext.atlasdb_shaded = 'com.palantir.atlasdb.shaded.'
