apply from: '../gradle/shared.gradle'
apply plugin: 'com.palantir.metric-schema'

license {
  exclude '**/LeaderElectionServiceMetrics.java'
}

dependencies {
  api project(':atlasdb-autobatch')
  api project(':atlasdb-commons')
  api project(':leader-election-api')

  implementation 'com.fasterxml.jackson.core:jackson-annotations'
  implementation 'com.fasterxml.jackson.core:jackson-databind'
  implementation 'com.github.ben-manes.caffeine:caffeine'
  implementation 'com.google.guava:guava'
  implementation 'com.google.protobuf:protobuf-java'
  implementation 'com.palantir.common:streams'
  implementation 'com.palantir.safe-logging:safe-logging'
  implementation 'com.palantir.sls.versions:sls-versions'
  implementation 'com.palantir.tracing:tracing'
  implementation 'com.zaxxer:HikariCP'
  implementation 'commons-io:commons-io'
  implementation 'io.dropwizard.metrics:metrics-core'
  implementation 'org.apache.commons:commons-lang3'
  implementation 'org.jdbi:jdbi3-core'
  implementation 'org.jdbi:jdbi3-sqlobject'
  implementation 'org.slf4j:slf4j-api'
  implementation 'org.xerial:sqlite-jdbc'
  implementation project(':commons-annotations')
  implementation project(':commons-executors')
  implementation project(':leader-election-api-protobufs')

  testImplementation 'com.google.guava:guava'
  testImplementation 'com.palantir.tracing:tracing-test-utils'
  testImplementation 'io.dropwizard.metrics:metrics-core'
  testImplementation 'org.assertj:assertj-core'
  testImplementation 'org.awaitility:awaitility'
  testImplementation 'org.mockito:mockito-core'
  testImplementation project(':commons-executors')
  testImplementation project(':leader-election-api-protobufs')
  testImplementation(group: 'org.jmock', name: 'jmock') {
    exclude group: 'org.hamcrest'
    exclude group: 'org.ow2.asm'
  }

  annotationProcessor 'org.derive4j:derive4j'
  annotationProcessor 'org.immutables:value'
  compileOnly 'org.derive4j:derive4j-annotation'
  compileOnly 'org.immutables:value::annotations'
  testCompileOnly 'org.immutables:value::annotations'
}

configurations {
    testArtifacts {
       extendsFrom testRuntimeOnly
    }
}


task testJarForPublishing(type: Jar) {
    from project.sourceSets.test.output
    classifier 'tests'
}

artifacts {
    testArtifacts testJarForPublishing
}


publishing {
    publications {
        maven(MavenPublication) {
            artifact(testJarForPublishing) {
                classifier 'tests'
            }
        }
    }
}
