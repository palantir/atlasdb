apply from: "${rootProject.projectDir}/gradle/shared.gradle"

buildscript {
    repositories {
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }
    dependencies {
        classpath 'com.avast.gradle:docker-compose-gradle-plugin:0.3.5'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'docker-compose'

task ensureDateUtilPresent(type: Exec) {
    commandLine 'sh', 'scripts/ensure-date-util-present.sh'
}

task runUnitTestsForPrintLogsInChronologicalOrderScript(type: Exec) {
    dependsOn ensureDateUtilPresent
    commandLine 'python', 'scripts/print_logs_in_chronological_order.py', '--tests-only'
}

check.dependsOn runUnitTestsForPrintLogsInChronologicalOrderScript

dependencies {
    implementation project(':atlasdb-config')

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8'
    implementation group: 'com.google.guava', name: 'guava'
    implementation group: 'org.clojure', name: 'clojure'
    implementation group: 'org.slf4j', name: 'slf4j-api'

    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    implementation 'com.google.errorprone:error_prone_annotations'
    implementation 'com.palantir.common:streams'
    implementation 'com.palantir.conjure.java.api:service-config'
    implementation 'com.palantir.conjure.java.api:ssl-config'
    implementation 'com.palantir.dialogue:dialogue-clients'
    implementation 'com.palantir.refreshable:refreshable'
    implementation 'com.palantir.safe-logging:preconditions'
    implementation 'com.palantir.safe-logging:safe-logging'
    implementation project(':atlasdb-api')
    implementation project(':atlasdb-commons')
    implementation project(':atlasdb-impl-shared')
    implementation project(':atlasdb-remoting-api')
    implementation project(':commons-executors')
    implementation project(':lock-api')
    implementation project(':lock-api-objects')
    implementation project(':timelock-api:timelock-api-objects')
    implementation project(':timestamp-api')

    testImplementation 'com.palantir.common:streams'
    testImplementation project(':lock-api')
    testImplementation project(':lock-api-objects')

    annotationProcessor group: 'org.immutables', name: 'value'
    compileOnly 'org.immutables:value::annotations'

    testImplementation group: 'org.assertj', name: 'assertj-core'
    testImplementation group: 'org.mockito', name: 'mockito-core'
}

shadowJar {
    dependencies {
        exclude(dependency(group: 'org.clojure', name: 'clojure'))
    }
}

task copyShadowJar(type: Copy, dependsOn: 'shadowJar') {
    from tasks.getByPath('shadowJar').outputs
    into 'resources/atlasdb/'
    rename { filename -> 'atlasdb-jepsen-tests-all.jar' }
}

task copyTimelockServer(type: Copy, dependsOn: ':timelock-server-distribution:distTar') {
    from tasks.getByPath(':timelock-server-distribution:distTar').outputs
    into 'resources/atlasdb/'
    rename { filename -> 'timelock-server.tgz' }
}

task jepsenTest(type: Exec, dependsOn: ['copyShadowJar', 'copyTimelockServer']) {
    environment = project.dockerCompose.environment
    commandLine project.dockerCompose.composeCommand('run', '--rm', 'jepsen')
}

check.dependsOn jepsenTest
